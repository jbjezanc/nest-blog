var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AccessTokenGuard.html",[0,2.655,1,2.655]],["body/guards/AccessTokenGuard.html",[1,3.309,2,2.502,3,0.12,4,0.107,5,0.107,6,5.468,7,4.523,8,3.025,9,0.236,10,1.059,11,1.592,12,5.468,13,1.833,14,4.955,15,1.366,16,2.726,17,5.57,18,4.523,19,4.523,20,0.613,21,3.479,22,1.234,23,0.014,24,0.984,25,0.392,26,0.873,27,4.308,28,4.523,29,3.479,30,3.309,31,1.021,32,2.617,33,4.955,34,3.839,35,3.479,36,1.318,37,2.617,38,0.322,39,1.48,40,0.526,41,3.608,42,0.484,43,1.594,44,2.175,45,2.324,46,2.175,47,3.025,48,2.502,49,2.726,50,0.12,51,0.028,52,2.324,53,1.14,54,2.502,55,2.726,56,3.479,57,2.25,58,3.479,59,3.479,60,4.445,61,3.479,62,3.479,63,3.479,64,2.082,65,1.643,66,1.525,67,3.882,68,1.071,69,3.025,70,3.479,71,3.025,72,1.525,73,1.099,74,1.668,75,3.479,76,3.479,77,0.008,78,0.008]],["title/interfaces/ActiveUserData.html",[79,2.1,80,2.1]],["body/interfaces/ActiveUserData.html",[3,0.193,4,0.171,5,0.171,9,0.379,23,0.014,25,0.46,36,1.938,50,0.193,77,0.012,78,0.012,79,2.945,80,3.574,81,3.724,82,3.724,83,1.935,84,4.848,85,1.8,86,3.321,87,5.449,88,2.327,89,2.342,90,4.368]],["title/controllers/AppController.html",[91,1.422,92,2.859]],["body/controllers/AppController.html",[3,0.201,4,0.178,5,0.178,23,0.014,38,0.323,42,0.808,50,0.201,51,0.047,53,1.335,77,0.012,78,0.012,91,2.481,92,4.986,93,2.247,94,5.047,95,4.635,96,5.047,97,3.877]],["title/modules/AppModule.html",[98,1.369,99,2.859]],["body/modules/AppModule.html",[0,2.839,1,2.839,2,2.03,3,0.098,4,0.087,5,0.087,7,2.03,23,0.014,25,0.192,38,0.367,39,0.724,42,0.393,43,1.293,44,1.764,46,1.764,50,0.098,51,0.023,57,1.01,74,1.353,77,0.007,78,0.007,92,3.677,93,1.645,95,4.011,96,2.454,98,2.209,99,5.662,100,1.947,101,1.293,102,1.418,103,1.418,104,1.293,105,2.57,106,1.418,107,2.454,108,2.454,109,2.454,110,4.011,111,4.285,112,4.011,113,4.011,114,4.285,115,4.011,116,4.285,117,3.776,118,2.136,119,1.418,120,1.418,121,2.211,122,2.846,123,4.251,124,4.251,125,2.03,126,1.764,127,1.05,128,3.33,129,3.558,130,2.822,131,4.251,132,2.822,133,4.251,134,2.822,135,4.251,136,2.822,137,2.211,138,2.822,139,2.822,140,2.822,141,2.822,142,1.491,143,1.571,144,2.454,145,2.822,146,2.454,147,2.822,148,2.454,149,3.677,150,2.822,151,3.057,152,2.822,153,2.211,154,2.822,155,2.822,156,2.822,157,4.006,158,2.454,159,2.822,160,2.822,161,2.211,162,2.454,163,2.822,164,2.822,165,2.822,166,2.454,167,2.822,168,2.822,169,2.454,170,2.822,171,2.822,172,2.822,173,2.822,174,2.822,175,2.454,176,2.822,177,2.454,178,2.822,179,2.822,180,2.822,181,1.571,182,2.822,183,1.885,184,2.822,185,2.822,186,2.822,187,2.454,188,2.454,189,2.454,190,2.454,191,3.696,192,2.822,193,2.822,194,2.822,195,3.696,196,1.764,197,2.211,198,2.822]],["title/injectables/AppService.html",[40,0.422,95,2.485]],["body/injectables/AppService.html",[3,0.195,4,0.173,5,0.173,9,0.383,10,1.456,20,0.599,23,0.014,31,1.161,36,1.811,38,0.263,40,0.723,42,0.785,50,0.195,51,0.046,73,1.25,77,0.012,78,0.012,95,4.258,199,1.612,200,4.9,201,7.605,202,5.636,203,5.636,204,5.636]],["title/controllers/AuthController.html",[91,1.422,205,2.859]],["body/controllers/AuthController.html",[3,0.143,4,0.127,5,0.127,9,0.28,10,1.192,11,2.01,20,0.592,22,1.192,23,0.014,24,0.951,25,0.379,26,0.844,31,1.149,38,0.34,39,1.058,42,0.574,50,0.143,51,0.033,53,0.949,73,1.237,77,0.01,78,0.01,91,1.476,93,1.597,97,2.755,205,4.011,206,3.587,207,2.428,208,3.104,209,2.01,210,4.369,211,4.369,212,3.232,213,4.556,214,1.595,215,5.577,216,4.126,217,4.126,218,1.921,219,3.232,220,4.556,221,5.577,222,4.126,223,4.126,224,2.296,225,4.126,226,3.587,227,1.27,228,4.232,229,3.587,230,3.232,231,3.587,232,2.579,233,3.587,234,2.967,235,3.232,236,2.755,237,4.126,238,5.577,239,4.011,240,4.126,241,4.126,242,2.967,243,4.126,244,4.126]],["title/modules/AuthModule.html",[98,1.369,110,2.485]],["body/modules/AuthModule.html",[3,0.127,4,0.113,5,0.113,23,0.014,38,0.366,42,0.51,43,1.676,44,2.288,46,2.288,50,0.127,51,0.03,77,0.009,78,0.009,93,1.988,98,2.043,100,1.676,101,1.676,102,1.839,103,1.839,104,1.676,105,2.982,106,2.982,110,4.961,117,3.023,118,2.581,119,1.839,120,1.839,122,2.037,128,2.867,137,2.867,146,3.182,189,3.182,190,3.182,191,3.182,195,3.182,205,4.267,228,4.836,229,3.182,245,3.182,246,3.182,247,3.182,248,4.098,249,3.909,250,4.391,251,4.391,252,4.391,253,3.659,254,4.267,255,3.023,256,3.659,257,3.659,258,3.693,259,3.659,260,3.659,261,3.182,262,2.867,263,3.659,264,3.43,265,3.659,266,3.659,267,3.659,268,3.659,269,3.182]],["title/injectables/AuthService.html",[40,0.422,228,2.485]],["body/injectables/AuthService.html",[3,0.134,4,0.119,5,0.119,9,0.263,10,1.141,11,1.971,13,1.685,15,1.472,20,0.649,22,1.306,23,0.014,24,1.042,25,0.415,26,0.925,31,1.1,38,0.333,39,1.69,40,0.567,42,0.539,50,0.134,51,0.031,53,1.406,68,1.643,73,1.184,77,0.009,78,0.009,199,1.106,209,1.971,210,4.182,211,4.182,212,4.182,213,4.322,218,1.838,219,4.182,220,4.322,228,3.337,230,3.031,235,3.031,236,2.584,251,4.666,252,4.666,255,2.277,261,3.364,264,2.584,270,3.364,271,2.782,272,3.419,273,3.869,274,3.869,275,3.869,276,2.419,277,3.869,278,2.782,279,2.584,280,3.869,281,3.869]],["title/guards/AuthenticationGuard.html",[0,2.655,149,2.859]],["body/guards/AuthenticationGuard.html",[0,2.313,1,4.742,2,4.514,3,0.12,4,0.107,5,0.107,7,2.491,9,0.235,10,1.056,11,1.588,12,6.311,13,1.903,15,1.362,20,0.525,22,1.056,23,0.014,24,0.842,25,0.335,26,0.747,27,4.295,28,4.514,30,2.313,31,0.714,32,2.609,38,0.309,40,0.525,41,3.088,42,0.482,49,2.714,50,0.12,51,0.04,52,2.313,53,1.587,57,2.374,64,1.455,65,1.148,68,1.066,73,0.768,74,2.368,77,0.008,78,0.008,85,0.921,91,1.239,125,2.491,148,3.011,149,3.552,196,2.165,232,2.165,234,2.491,239,2.491,282,3.011,283,4.94,284,4.94,285,4.94,286,3.464,287,7.1,288,3.464,289,3.464,290,2.714,291,2.714,292,2.714,293,4.94,294,3.464,295,3.464,296,3.464,297,4.295,298,3.464,299,4.295,300,3.464,301,4.51,302,2.165,303,3.011,304,3.87,305,2.313,306,3.464,307,3.464,308,3.464,309,3.464,310,3.464,311,1.239,312,2.714,313,2.491,314,3.464,315,3.464,316,2.637,317,3.464,318,3.464,319,3.464,320,2.714,321,3.464,322,3.464,323,3.464,324,3.464]],["title/injectables/BcryptProvider.html",[40,0.422,258,2.859]],["body/injectables/BcryptProvider.html",[3,0.15,4,0.133,5,0.133,9,0.293,10,1.23,11,1.784,20,0.611,22,1.23,23,0.014,24,0.981,25,0.391,26,0.87,31,1.185,32,3.642,36,2.062,38,0.301,40,0.611,42,0.602,50,0.15,51,0.035,52,2.886,57,1.546,68,1.33,73,1.276,77,0.01,78,0.01,181,2.405,199,1.236,209,2.037,248,3.202,258,4.137,325,3.756,326,5.623,327,5.002,328,3.756,329,6.421,330,5.996,331,4.32,332,4.043,333,5.002,334,4.32,335,3.756,336,4.507,337,2.543,338,6.468,339,4.32,340,3.756,341,4.32,342,4.32]],["title/injectables/CreateGoogleUserProvider.html",[40,0.422,343,2.485]],["body/injectables/CreateGoogleUserProvider.html",[3,0.143,4,0.127,5,0.127,9,0.281,10,1.194,11,1.745,13,1.141,15,1.541,20,0.593,22,1.194,23,0.014,24,0.952,25,0.38,26,0.845,31,0.852,38,0.33,39,1.061,40,0.593,42,0.576,50,0.143,51,0.034,53,0.951,57,1.999,64,1.738,65,1.853,66,1.813,68,1.273,72,1.813,73,0.917,77,0.01,78,0.01,83,1.81,86,1.813,127,1.539,199,1.183,209,1.745,218,1.424,311,1.48,316,1.738,343,3.493,344,4.957,345,3.724,346,3.241,347,4.858,348,2.763,349,3.103,350,4.137,351,4.226,352,4.858,353,4.727,354,4.137,355,2.975,356,1.48,357,2.435,358,2.079,359,3.596,360,3.596,361,2.763,362,3.596,363,2.586,364,4.137,365,2.586,366,4.137,367,2.586,368,4.137,369,4.137,370,5.588,371,4.137,372,3.241,373,1.539]],["title/classes/CreateManyUsersDto.html",[51,0.032,374,2.485]],["body/classes/CreateManyUsersDto.html",[3,0.167,4,0.149,5,0.149,9,0.328,20,0.513,23,0.014,25,0.506,38,0.336,50,0.167,51,0.055,74,3.273,77,0.011,78,0.011,83,1.382,85,1.646,214,1.382,311,1.728,312,4.848,320,3.784,374,3.869,375,1.947,376,4.848,377,4.133,378,4.2,379,4.56,380,4.007,381,4.831,382,4.848,383,5.38,384,4.831,385,4.2,386,4.831,387,5.38,388,3.268,389,5.38,390,2.029,391,3.226,392,2.843,393,4.45,394,2.315]],["title/classes/CreatePostDto.html",[51,0.032,395,2.34]],["body/classes/CreatePostDto.html",[3,0.067,4,0.059,5,0.059,9,0.131,20,0.679,23,0.014,25,0.486,26,1.011,30,2.107,34,1.02,36,1.882,38,0.255,50,0.067,51,0.032,74,2.762,77,0.005,78,0.005,85,1.228,88,1.008,142,1.666,188,1.679,214,1.829,227,2.153,301,2.472,302,4.553,312,3.133,316,1.325,320,3.133,373,2.568,375,0.778,382,3.133,383,2.743,385,1.679,387,2.743,388,2.688,389,2.743,390,0.811,392,1.137,393,3.66,394,0.926,395,1.857,396,5.694,397,1.513,398,4.278,399,2.876,400,3.133,401,4.709,402,4.014,403,2.671,404,3.399,405,2.671,406,2.995,407,5.01,408,4.425,409,1.932,410,1.932,411,3.155,412,2.269,413,4.153,414,1.932,415,1.932,416,3.182,417,3.477,418,1.932,419,4.425,420,1.666,421,1.932,422,1.932,423,3.155,424,4.617,425,4.617,426,1.857,427,2.743,428,1.932,429,1.932,430,2.995,431,4.014,432,4,433,4,434,1.932,435,3.155,436,1.932,437,1.932,438,3.155,439,4.014,440,3.155,441,3.155,442,1.932,443,1.932,444,1.932,445,1.932,446,1.513,447,2.743,448,1.932,449,4.014,450,3.617,451,2.472,452,2.743,453,2.743,454,2.743,455,3.133,456,2.743,457,1.932,458,1.932,459,3.987,460,2.743,461,2.743,462,2.743,463,1.932,464,1.932,465,2.472,466,1.932,467,1.932,468,1.932,469,1.932,470,1.932,471,1.932,472,2.472,473,4,474,2.472,475,3.538,476,3.647,477,2.743,478,1.513,479,1.513,480,1.513,481,1.679,482,1.679,483,1.513,484,1.513,485,3.155,486,4.709,487,4,488,1.679,489,2.472,490,1.679,491,1.932,492,1.679,493,1.679,494,1.932,495,1.932,496,1.932,497,1.932,498,1.932,499,1.679,500,1.932,501,1.932,502,3.155,503,1.932,504,1.932,505,1.932,506,2.743,507,1.932,508,1.932,509,1.932,510,3.321,511,1.932,512,1.932,513,1.932,514,1.513,515,1.932,516,1.389,517,1.679,518,2.472,519,1.932,520,1.932,521,1.932,522,1.932,523,1.679,524,1.932,525,1.932,526,1.932,527,1.679,528,1.932,529,1.389,530,1.513]],["title/classes/CreatePostMetaOptionsDto.html",[51,0.032,416,2.485]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.19,4,0.168,5,0.168,9,0.372,20,0.582,23,0.014,25,0.372,36,1.78,38,0.255,50,0.19,51,0.054,77,0.011,78,0.011,85,1.78,142,3.536,214,1.566,227,2.06,375,2.208,388,3.536,390,2.301,416,4.185,474,5.244,483,5.244,518,5.664,531,3.536,532,4.762,533,5.477,534,5.477]],["title/injectables/CreatePostProvider.html",[40,0.422,535,2.485]],["body/injectables/CreatePostProvider.html",[3,0.115,4,0.102,5,0.102,9,0.226,10,1.027,11,1.553,13,1.553,15,1.324,20,0.51,22,1.027,23,0.014,24,0.819,25,0.326,26,0.726,31,0.686,37,2.536,38,0.335,39,1.444,40,0.51,42,0.464,50,0.115,51,0.027,53,1.295,57,1.192,64,2.366,65,1.867,66,2.105,68,1.733,72,2.105,73,1.065,77,0.008,78,0.008,80,3.256,82,2.224,83,1.869,127,1.239,199,0.952,209,1.553,218,1.147,227,2.011,272,3.29,276,2.082,311,2.015,316,2.017,349,2.823,355,2.395,356,1.192,358,1.674,372,3.762,373,1.239,395,4.007,404,2.224,406,3.628,465,2.609,514,2.609,535,3.002,536,4.897,537,2.895,538,3.33,539,3.998,540,3.33,541,4.897,542,4.175,543,3.33,544,2.224,545,1.596,546,2.395,547,2.609,548,2.895,549,2.224,550,2.895,551,4.433,552,3.454,553,2.395,554,2.895,555,3.33,556,3.33,557,3.33,558,3.33,559,2.895,560,3.33,561,2.609,562,1.854,563,3.33,564,2.895,565,2.395,566,3.33]],["title/classes/CreateTagDto.html",[51,0.032,567,2.655]],["body/classes/CreateTagDto.html",[3,0.131,4,0.117,5,0.117,9,0.258,20,0.729,23,0.014,24,1.031,25,0.466,26,1.075,36,2.031,38,0.245,50,0.131,51,0.043,77,0.009,78,0.009,85,1.4,214,1.963,227,1.861,302,4.441,373,2.431,375,1.529,388,3.195,390,1.593,393,4.35,394,1.818,399,4.35,403,4.04,404,4.585,413,3.517,446,2.972,447,4.578,449,5.681,450,5.119,451,4.125,452,4.578,453,4.578,454,4.578,455,4.125,456,4.578,474,4.125,475,3.846,476,4.364,477,4.578,478,2.972,479,2.972,480,2.972,486,5.119,488,3.298,492,3.298,493,3.298,499,3.298,567,3.517,568,6.176,569,3.298,570,3.793,571,3.793,572,3.793,573,3.793,574,3.793,575,3.793,576,3.793,577,3.793,578,3.793,579,3.793,580,3.298]],["title/classes/CreateUserDto.html",[51,0.032,380,2.213]],["body/classes/CreateUserDto.html",[3,0.146,4,0.13,5,0.13,9,0.286,20,0.725,23,0.014,25,0.464,26,0.856,36,2.025,38,0.196,50,0.146,51,0.046,77,0.01,78,0.01,85,1.505,86,2.8,88,1.807,181,3.556,214,1.953,363,3.994,365,3.994,375,1.699,376,5.58,380,3.15,388,3.606,390,1.771,451,4.433,475,3.331,476,4.56,478,3.302,479,3.302,480,3.302,580,4.92,581,3.302,582,4.215,583,4.215,584,4.215,585,4.215,586,4.215,587,4.215,588,4.215,589,5.659,590,5.659,591,5.659,592,5.659,593,5.659,594,5.659,595,5.659,596,4.584,597,5.659,598,5.659,599,5.659,600,4.215,601,4.92,602,6.388,603,4.215,604,4.215]],["title/injectables/CreateUserProvider.html",[40,0.422,605,2.485]],["body/injectables/CreateUserProvider.html",[3,0.107,4,0.095,5,0.095,9,0.211,10,0.975,11,1.492,13,1.492,15,1.258,20,0.485,22,0.975,23,0.014,24,0.778,25,0.31,26,0.69,31,0.639,34,2.41,37,1.639,38,0.32,39,1.387,40,0.485,42,0.432,50,0.107,51,0.025,53,1.049,64,2.505,65,2.107,66,2.785,68,1.835,72,2.371,73,0.688,77,0.008,78,0.008,83,1.706,86,2.614,127,1.155,181,1.728,183,2.073,199,0.888,209,1.492,218,1.069,248,3.921,255,1.827,279,2.073,311,1.111,316,2.669,336,2.432,344,4.238,346,2.432,348,2.073,349,2.731,351,3.613,356,1.111,357,1.827,358,1.56,361,2.073,362,2.699,373,1.697,380,3.698,391,2.073,544,3.047,545,1.488,561,3.574,605,2.852,606,3.967,607,4.405,608,3.104,609,3.967,610,3.104,611,3.184,612,3.104,613,3.104,614,2.073,615,2.699,616,5.41,617,4.563,618,3.104,619,3.104,620,3.104,621,2.699,622,3.104,623,3.967,624,3.104,625,3.104,626,3.574,627,3.574,628,3.574,629,3.891,630,3.574,631,3.967,632,2.699,633,3.104,634,4.238,635,3.104,636,3.104,637,3.104,638,3.104,639,3.104,640,2.232]],["title/injectables/DataResponseInterceptor.html",[40,0.422,151,2.859]],["body/injectables/DataResponseInterceptor.html",[3,0.156,4,0.139,5,0.139,9,0.306,10,1.265,13,1.243,15,1.632,20,0.628,22,1.265,23,0.014,24,1.009,25,0.402,26,0.895,28,5.043,30,3.011,31,0.929,38,0.308,39,1.156,40,0.628,42,0.628,43,2.065,50,0.156,51,0.037,52,3.011,53,1.037,73,1,77,0.01,78,0.01,129,4.762,151,4.255,153,5.175,199,1.289,332,3.699,641,5.743,642,3.92,643,5.917,644,3.92,645,4.508,646,5.917,647,5.175,648,7.013,649,4.508,650,6.605,651,5.917,652,4.508,653,3.532,654,4.508,655,4.508,656,4.508,657,4.508]],["title/injectables/FindOneByGoogleIdProvider.html",[40,0.422,658,2.485]],["body/injectables/FindOneByGoogleIdProvider.html",[3,0.158,4,0.14,5,0.14,9,0.31,10,1.275,11,1.832,13,1.258,15,1.644,20,0.633,22,1.275,23,0.014,24,1.016,25,0.405,26,0.902,31,0.94,36,1.767,38,0.328,39,1.17,40,0.633,42,0.635,50,0.158,51,0.037,53,1.049,68,1.404,73,1.011,77,0.01,78,0.01,83,1.305,127,1.697,199,1.305,209,1.832,218,1.571,345,3.91,348,3.046,349,3.227,351,4.437,356,1.632,357,2.685,358,2.292,361,3.046,367,3.728,596,4.153,658,3.728,659,5.204,660,3.966,661,5.184,662,4.561,663,5.184,664,4.561,665,3.573]],["title/injectables/FindOneUserByEmailProvider.html",[40,0.422,666,2.485]],["body/injectables/FindOneUserByEmailProvider.html",[3,0.142,4,0.126,5,0.126,9,0.279,10,1.188,11,1.738,13,1.132,15,1.533,20,0.59,22,1.188,23,0.014,24,0.947,25,0.377,26,0.841,31,0.845,36,1.676,37,2.935,38,0.315,39,1.052,40,0.59,41,2.566,42,0.571,50,0.142,51,0.033,53,0.944,64,2.335,65,1.843,66,1.799,68,1.263,72,1.799,73,0.91,77,0.01,78,0.01,83,2.238,86,2.762,127,1.527,199,1.174,209,1.738,218,1.413,316,1.724,348,2.741,349,3.093,351,4.209,356,1.468,357,2.415,358,2.062,361,2.741,373,1.527,417,3.568,596,3.94,611,2.415,640,2.951,659,4.937,665,3.215,666,3.474,667,3.568,668,4.832,669,4.104,670,4.832,671,4.104,672,3.568,673,3.568,674,4.104,675,3.215]],["title/injectables/GenerateTokensProvider.html",[40,0.422,249,2.213]],["body/injectables/GenerateTokensProvider.html",[3,0.12,4,0.107,5,0.107,9,0.236,10,1.059,11,1.905,13,1.366,15,1.366,16,2.726,17,5.57,18,4.523,19,4.523,20,0.613,22,1.344,23,0.014,24,0.984,25,0.427,26,0.873,31,1.021,38,0.322,39,1.48,40,0.526,42,0.484,43,1.594,44,2.175,46,2.175,50,0.12,51,0.028,53,1.14,54,2.502,57,1.245,60,3.098,67,4.927,68,1.525,73,1.099,77,0.008,78,0.008,80,1.838,83,1.976,86,1.525,87,2.502,88,2.207,199,0.995,209,1.905,218,1.706,249,2.758,262,2.726,278,2.502,290,2.726,337,2.917,549,2.324,676,4.927,677,2.726,678,4.955,679,4.955,680,3.479,681,4.955,682,3.479,683,4.955,684,6.647,685,4.927,686,3.479,687,4.308,688,3.479,689,2.726,690,3.025,691,3.479,692,3.025,693,3.025,694,3.025,695,3.025,696,3.025,697,3.025,698,4.955,699,4.308,700,3.479,701,3.479,702,3.479,703,3.479,704,3.025,705,3.479,706,3.479]],["title/classes/GetPostsBaseDto.html",[51,0.032,707,2.859]],["body/classes/GetPostsBaseDto.html",[3,0.163,4,0.144,5,0.144,9,0.319,20,0.646,23,0.014,25,0.501,26,1.078,38,0.332,50,0.163,51,0.058,77,0.01,78,0.01,85,1.617,214,1.739,375,1.894,390,1.974,392,2.766,394,2.252,430,4.449,475,3.966,707,4.846,708,5.279,709,3.681,710,5.859,711,5.859,712,6.079,713,4.699,714,4.699,715,5.859,716,5.285,717,3.801,718,3.38,719,3.681,720,2.938,721,3.38]],["title/classes/GetPostsDto.html",[51,0.032,720,2.485]],["body/classes/GetPostsDto.html",[3,0.175,4,0.156,5,0.156,23,0.014,25,0.474,38,0.341,50,0.175,51,0.059,77,0.011,78,0.011,375,2.042,390,2.128,392,2.982,394,2.429,430,4.313,475,4.109,707,5.02,708,3.969,709,3.969,710,4.405,711,4.405,715,6.069,716,6.069,717,4.364,718,3.644,719,3.969,720,3.988,721,4.587]],["title/classes/GetUsersParamDto.html",[51,0.032,722,2.655]],["body/classes/GetUsersParamDto.html",[3,0.174,4,0.155,5,0.155,9,0.342,20,0.535,23,0.014,25,0.473,26,0.961,38,0.324,50,0.174,51,0.056,77,0.011,78,0.011,83,1.817,85,1.689,88,2.223,89,3.166,214,1.44,302,3.971,373,1.873,375,2.029,379,4.243,390,2.115,392,2.963,394,2.413,408,4.377,472,4.977,475,3.739,486,4.977,722,4.243,723,5.523,724,4.377,725,6.352,726,5.034,727,5.034,728,5.034]],["title/controllers/GoogleAuthenticationController.html",[91,1.422,254,2.859]],["body/controllers/GoogleAuthenticationController.html",[3,0.163,4,0.144,5,0.144,9,0.319,10,1.299,13,1.296,15,1.296,20,0.499,22,1.005,23,0.014,24,0.801,25,0.319,26,0.711,31,0.968,38,0.344,39,1.205,42,0.654,50,0.163,51,0.038,53,1.081,73,1.042,77,0.01,78,0.01,91,1.681,93,1.819,207,2.766,208,2.616,214,1.344,224,2.616,227,2.074,231,4.086,232,2.938,233,4.086,234,3.38,236,3.138,239,3.38,250,4.455,254,4.372,269,4.086,729,5.285,730,4.086,731,4.699,732,6.079,733,5.285,734,4.086,735,5.048,736,4.699,737,4.699,738,4.086,739,4.699,740,4.699,741,4.699]],["title/injectables/GoogleAuthenticationService.html",[40,0.422,250,2.485]],["body/injectables/GoogleAuthenticationService.html",[3,0.105,4,0.094,5,0.094,9,0.207,10,0.961,11,1.475,13,1.819,15,1.24,18,4.248,19,4.248,20,0.627,22,0.961,23,0.014,24,0.766,25,0.363,26,0.68,31,0.926,38,0.318,39,1.372,40,0.478,41,1.903,42,0.424,43,1.394,46,1.903,47,2.646,50,0.105,51,0.025,52,2.033,53,1.23,54,2.189,55,2.384,57,2.36,60,2.811,64,1.889,65,1.773,66,1.334,67,2.384,68,1.94,72,1.334,73,0.997,77,0.008,78,0.008,83,1.887,85,1.196,86,2.344,87,2.189,89,1.278,183,2.033,199,0.87,208,1.694,218,1.048,236,2.033,242,3.234,249,3.899,250,2.811,255,1.791,264,2.033,271,2.189,272,3.126,276,1.903,279,2.033,311,1.089,316,1.278,337,2.647,345,3.148,363,3.343,365,3.343,367,3.693,529,2.189,552,2.189,614,2.033,623,2.646,634,2.384,672,2.646,676,2.384,733,3.909,734,3.909,735,4.209,738,2.646,742,5.479,743,2.646,744,5.348,745,6.597,746,4.497,747,3.043,748,3.043,749,2.384,750,5.348,751,2.646,752,3.043,753,3.043,754,3.043,755,4.497,756,3.043,757,3.043,758,3.043,759,2.646,760,3.043,761,3.043,762,3.043,763,3.043,764,3.043,765,3.043,766,3.043,767,2.646,768,3.043,769,2.384,770,3.043,771,3.043,772,3.043,773,3.043,774,2.646]],["title/classes/GoogleTokenDto.html",[51,0.032,735,2.655]],["body/classes/GoogleTokenDto.html",[3,0.195,4,0.173,5,0.173,9,0.383,20,0.599,23,0.014,25,0.383,36,1.811,38,0.263,50,0.195,51,0.055,60,4.577,77,0.012,78,0.012,85,1.811,214,1.612,375,2.272,388,3.866,390,2.368,735,4.549,775,5.922,776,4.416,777,5.636]],["title/interfaces/GoogleUser.html",[79,2.1,353,2.655]],["body/interfaces/GoogleUser.html",[3,0.184,4,0.164,5,0.164,9,0.362,23,0.014,25,0.507,36,2.177,50,0.184,77,0.011,78,0.011,79,2.814,81,3.558,85,1.75,86,3.269,353,4.395,363,4.663,365,4.663,367,4.663,778,4.632,779,4.632]],["title/injectables/HashingProvider.html",[40,0.422,248,2.213]],["body/injectables/HashingProvider.html",[3,0.165,4,0.147,5,0.147,9,0.324,10,1.312,20,0.652,22,1.312,23,0.014,24,1.046,25,0.417,26,0.929,31,1.265,32,3.785,36,2.101,38,0.222,40,0.652,42,0.664,50,0.165,51,0.039,77,0.01,78,0.01,199,1.365,248,3.417,326,5.901,327,5.338,328,4.148,329,6.599,330,5.901,332,4.244,333,5.338,780,4.148,781,7.72,782,4.771,783,4.771]],["title/modules/MailModule.html",[98,1.369,111,2.655]],["body/modules/MailModule.html",[3,0.14,4,0.124,5,0.124,11,1.114,23,0.014,38,0.345,39,1.036,42,0.563,43,1.85,50,0.14,51,0.033,65,1.339,74,1.936,77,0.009,78,0.009,83,1.155,98,2.311,100,2.518,101,1.85,102,2.03,103,2.03,104,1.85,105,3.142,106,3.142,111,4.949,118,2.763,119,2.03,120,2.03,122,2.249,129,3.908,161,3.165,162,3.512,169,3.512,175,3.512,177,3.512,208,2.249,413,2.698,420,2.904,455,3.165,506,3.512,530,3.165,607,4.917,784,3.512,785,3.512,786,3.512,787,4.04,788,5.499,789,4.04,790,4.04,791,4.308,792,3.165,793,3.512,794,2.698,795,5.499,796,4.04,797,4.04,798,3.512,799,3.512,800,4.04,801,4.04,802,4.04,803,4.04,804,4.04,805,4.04,806,4.04,807,4.04,808,4.04,809,4.04,810,3.512,811,4.04,812,4.04,813,4.04,814,4.04,815,4.04]],["title/injectables/MailService.html",[40,0.422,607,2.485]],["body/injectables/MailService.html",[3,0.156,4,0.139,5,0.139,9,0.306,10,1.265,11,1.821,13,1.243,15,1.632,20,0.628,22,1.265,23,0.014,24,1.126,25,0.402,26,0.895,30,3.011,31,0.929,32,3.125,38,0.308,39,1.156,40,0.628,42,0.628,50,0.156,51,0.037,53,1.037,68,1.388,77,0.01,78,0.01,83,2.083,86,1.976,199,1.289,209,1.821,413,3.011,607,3.699,689,3.532,704,5.145,791,4.636,792,3.532,810,3.92,816,3.92,817,5.917,818,4.508,819,7.617,820,4.508,821,5.917,822,4.508,823,4.508,824,4.508,825,4.508,826,4.508,827,5.917,828,4.508,829,4.508,830,4.508]],["title/entities/MetaOption.html",[831,1.906,832,2.213]],["body/entities/MetaOption.html",[3,0.144,4,0.128,5,0.128,9,0.282,20,0.752,23,0.014,24,0.707,25,0.496,36,1.489,38,0.261,50,0.144,51,0.034,77,0.01,78,0.01,85,1.489,88,1.788,89,2.662,143,4.062,214,2.026,227,2.366,356,1.484,420,2.956,430,3.993,439,4.867,518,4.964,531,3.855,831,2.683,832,3.116,833,2.593,834,3.606,835,4.964,836,4.964,837,4.964,838,4.148,839,4.232,840,4.148,841,2.77,842,3.738,843,4.148,844,3.606,845,5.598,846,4.867,847,4.148,848,4.148,849,4.964,850,4.148,851,3.249,852,3.738,853,5.598,854,4.867,855,4.148,856,3.249]],["title/controllers/MetaOptionsController.html",[91,1.422,857,2.859]],["body/controllers/MetaOptionsController.html",[3,0.165,4,0.147,5,0.147,9,0.324,10,1.312,13,1.316,15,1.316,20,0.507,22,1.02,23,0.014,24,0.813,25,0.324,26,0.722,31,0.983,38,0.316,39,1.224,42,0.664,50,0.165,51,0.039,53,1.097,73,1.058,77,0.01,78,0.01,91,1.707,93,1.847,142,3.242,143,3.417,207,2.808,209,1.872,214,1.365,224,2.656,227,2.206,311,2.197,416,4.745,484,3.738,530,4.809,531,3.242,545,2.287,857,4.415,858,4.148,859,4.148,860,4.771,861,4.48,862,4.148,863,4.148,864,4.771,865,4.148,866,4.771]],["title/modules/MetaOptionsModule.html",[98,1.369,112,2.485]],["body/modules/MetaOptionsModule.html",[3,0.172,4,0.152,5,0.152,23,0.014,38,0.35,42,0.69,50,0.172,51,0.04,77,0.011,78,0.011,93,2.434,98,2.379,100,2.269,101,2.269,102,2.49,103,2.49,104,2.269,105,3.472,106,2.49,112,4.792,118,3.16,119,2.49,120,2.49,122,2.757,126,3.097,127,1.843,142,3.321,143,2.757,531,2.616,832,2.757,857,4.968,861,4.792,862,4.307,863,4.307,867,4.307,868,4.307,869,4.954,870,4.954,871,3.308,872,4.954]],["title/injectables/MetaOptionsService.html",[40,0.422,861,2.485]],["body/injectables/MetaOptionsService.html",[3,0.153,4,0.136,5,0.136,9,0.3,10,1.248,11,1.804,13,1.219,15,1.61,20,0.62,22,1.248,23,0.014,24,0.995,25,0.397,26,0.883,31,0.91,38,0.337,39,1.133,40,0.62,42,0.615,50,0.153,51,0.036,53,1.016,57,1.581,68,1.36,73,0.98,77,0.01,78,0.01,127,1.644,142,3.084,199,1.264,209,1.804,218,1.522,227,1.36,311,2.089,349,3.314,356,1.581,358,2.221,416,4.647,484,3.462,531,3.454,545,2.118,832,3.64,859,5.077,861,3.651,871,2.951,873,5.686,874,3.842,875,4.419,876,4.419,877,5.077,878,4.419,879,3.842,880,4.419,881,4.419]],["title/interfaces/Paginated.html",[79,2.1,882,2.655]],["body/interfaces/Paginated.html",[3,0.176,4,0.156,5,0.156,9,0.345,23,0.014,25,0.532,36,2.01,50,0.176,77,0.011,78,0.011,79,2.685,81,3.395,85,1.7,88,2.343,90,3.982,142,3.874,332,4.586,647,3.982,685,5.477,882,4.269,883,4.42,884,6.378,885,7.335,886,4.42,887,4.42,888,4.42,889,4.42,890,4.42,891,4.42,892,4.42]],["title/modules/PaginationModule.html",[98,1.369,113,2.485]],["body/modules/PaginationModule.html",[3,0.18,4,0.16,5,0.16,23,0.014,38,0.302,42,0.724,50,0.18,51,0.042,77,0.011,78,0.011,98,2.433,100,2.383,101,2.383,102,2.615,103,2.615,104,2.383,105,3.551,106,3.551,113,4.921,118,3.259,119,2.615,120,2.615,893,4.523,894,4.523,895,4.523,896,5.102,897,5.202,898,5.202]],["title/injectables/PaginationProvider.html",[40,0.422,896,2.485]],["body/injectables/PaginationProvider.html",[3,0.117,4,0.104,5,0.104,9,0.229,10,1.035,11,1.563,13,0.928,15,1.335,20,0.514,22,1.211,23,0.014,24,0.825,25,0.385,26,0.732,31,0.693,32,2.556,34,3.875,38,0.318,39,0.863,40,0.514,42,0.469,45,2.248,50,0.117,51,0.027,53,0.774,57,2.578,65,1.116,68,1.489,73,0.746,77,0.011,78,0.008,88,1.075,90,2.637,125,2.421,142,1.778,199,0.963,209,1.563,311,1.204,332,2.104,349,3.225,356,1.204,426,1.981,516,4.456,614,2.248,647,2.637,685,2.637,717,3.873,719,2.637,882,3.232,884,2.927,886,2.927,887,4.926,888,2.927,889,5.386,890,2.927,891,2.927,892,2.927,896,3.026,899,2.927,900,5.666,901,3.366,902,3.366,903,3.366,904,3.366,905,4.84,906,3.366,907,3.366,908,3.366,909,3.366,910,3.366,911,3.366,912,7.205,913,6.195,914,2.927,915,3.366,916,4.84,917,3.366,918,3.366,919,3.366,920,3.366,921,3.366,922,3.366,923,3.366,924,3.366,925,3.366,926,4.84,927,3.366,928,3.366,929,3.366,930,3.366,931,3.366]],["title/classes/PaginationQueryDto.html",[51,0.032,717,2.485]],["body/classes/PaginationQueryDto.html",[3,0.174,4,0.155,5,0.155,9,0.342,20,0.675,23,0.014,25,0.431,26,1.106,38,0.235,50,0.174,51,0.052,77,0.011,78,0.011,85,1.689,88,2.335,196,3.971,214,1.817,375,2.029,390,2.115,426,4.097,475,4.097,510,4.568,516,4.568,717,3.971,718,5.005,932,4.377,933,5.005,934,5.523,935,6.352,936,5.034,937,5.034,938,6.96]],["title/classes/PatchPostDto.html",[51,0.032,939,2.655]],["body/classes/PatchPostDto.html",[3,0.177,4,0.157,5,0.157,9,0.346,20,0.542,23,0.014,25,0.346,38,0.326,50,0.177,51,0.052,77,0.011,78,0.011,85,1.703,88,2.046,89,3.178,214,1.459,227,1.971,311,1.825,373,1.897,375,2.055,388,3.383,390,2.142,393,4.606,394,2.445,395,3.002,397,3.995,446,3.995,472,5.018,546,3.668,721,4.606,939,4.278,940,5.568,941,6.405,942,6.405,943,5.1,944,5.1,945,4.434,946,3.995]],["title/classes/PatchUserDto.html",[51,0.032,947,2.859]],["body/classes/PatchUserDto.html",[3,0.201,4,0.178,5,0.178,23,0.014,38,0.323,50,0.201,51,0.047,77,0.012,78,0.012,311,2.077,313,4.175,375,2.339,380,3.231,391,3.877,581,4.547,721,4.986,945,5.047,947,4.986,948,5.047,949,6.933,950,5.047]],["title/entities/Post.html",[227,1.223,831,1.906]],["body/entities/Post.html",[3,0.086,4,0.077,5,0.077,9,0.169,20,0.759,23,0.014,24,0.424,25,0.521,26,1.081,36,1.837,37,2.039,38,0.285,50,0.086,51,0.02,74,3.604,77,0.007,78,0.007,83,1.746,85,1.027,88,1.233,89,1.987,143,1.385,166,2.163,196,3.332,214,2.043,227,1.188,356,0.89,398,3.705,399,3.401,400,4.52,401,5.157,402,4.112,403,3.159,404,3.159,405,3.159,406,2.784,407,4.112,420,3.477,430,2.272,459,4.52,481,2.163,482,2.163,489,5.157,531,1.314,551,3.401,562,3.398,565,2.776,689,1.949,831,1.85,832,2.967,833,1.555,839,3.159,841,4.397,842,4.982,844,2.163,852,4.515,854,3.356,856,4.175,871,1.662,951,2.163,952,2.488,953,3.86,954,6.105,955,2.488,956,4.634,957,2.488,958,4.39,959,4.39,960,3.024,961,2.488,962,2.488,963,3.86,964,2.488,965,2.488,966,3.356,967,2.488,968,2.488,969,3.356,970,2.488,971,2.488,972,2.163,973,3.86,974,2.488,975,2.488,976,3.356,977,2.488,978,3.86,979,3.356,980,3.86,981,2.488,982,1.662,983,2.488,984,2.488,985,2.488,986,2.488,987,2.488,988,2.163,989,2.488,990,2.163,991,2.488,992,2.488,993,2.488]],["title/controllers/PostsController.html",[91,1.422,994,2.859]],["body/controllers/PostsController.html",[3,0.1,4,0.089,5,0.089,9,0.196,10,0.924,20,0.611,22,1.23,23,0.014,24,0.981,25,0.391,26,0.87,31,1.185,34,1.524,36,1.378,38,0.335,42,0.402,45,1.927,48,2.075,49,2.26,50,0.1,51,0.023,53,0.664,65,1.433,73,1.276,77,0.007,78,0.007,80,3.039,82,1.927,83,1.762,88,1.655,89,1.815,91,1.032,93,1.117,97,1.927,207,1.698,209,2.037,214,1.646,224,2.405,227,2.123,373,2.14,394,1.383,395,3.807,405,4.32,413,3.843,523,3.757,527,3.757,545,1.383,546,3.108,549,1.927,614,1.927,687,3.757,720,3.597,798,3.757,939,4.32,946,3.386,982,1.927,994,3.108,995,2.508,996,5.181,997,4.322,998,5.181,999,4.322,1000,2.885,1001,4.322,1002,4.322,1003,5.754,1004,5.754,1005,2.885,1006,2.885,1007,2.885,1008,3.726,1009,2.885,1010,2.885,1011,4.505,1012,4.322,1013,2.885,1014,2.885,1015,4.322,1016,5.003,1017,2.885,1018,2.885,1019,2.885,1020,2.885,1021,2.508,1022,2.885,1023,2.885,1024,2.885,1025,2.508,1026,3.386,1027,3.757,1028,3.108,1029,2.885,1030,3.597,1031,2.508,1032,4.059,1033,4.505,1034,2.508,1035,2.26,1036,2.075,1037,2.508,1038,3.386,1039,2.26,1040,2.885,1041,2.885,1042,2.885,1043,2.885,1044,2.885,1045,3.386,1046,4.322,1047,2.885,1048,2.885,1049,2.885,1050,2.885,1051,2.885]],["title/modules/PostsModule.html",[98,1.369,114,2.655]],["body/modules/PostsModule.html",[3,0.138,4,0.123,5,0.123,23,0.014,38,0.363,42,0.557,50,0.138,51,0.032,77,0.009,78,0.009,93,2.113,98,2.141,100,1.831,101,1.831,102,2.009,103,2.009,104,1.831,105,3.125,106,2.009,112,4.513,113,4.513,114,5.362,115,4.513,117,4.249,118,2.744,119,2.009,120,2.009,122,3.039,126,2.5,127,1.487,137,3.132,143,3.039,144,3.476,227,1.231,531,2.884,535,4.513,547,3.132,832,3.039,871,2.67,994,4.472,1030,4.513,1031,3.476,1052,3.476,1053,3.998,1054,3.476,1055,3.998,1056,3.998,1057,3.998,1058,3.998,1059,3.476,1060,3.476,1061,3.998]],["title/injectables/PostsService.html",[40,0.422,1030,2.485]],["body/injectables/PostsService.html",[3,0.069,4,0.061,5,0.061,9,0.135,10,0.873,11,1.859,13,1.527,15,0.892,20,0.549,22,1.105,23,0.014,24,0.881,25,0.351,26,0.782,31,0.969,32,1.708,34,2.157,37,1.708,38,0.328,39,1.421,40,0.343,42,0.277,50,0.069,51,0.016,53,1.274,57,0.712,64,2.172,65,2.016,66,2.428,68,1.705,72,1.79,73,1.147,74,0.954,77,0.006,78,0.006,80,2.483,82,1.33,83,1.479,85,0.529,88,1.501,89,1.975,127,0.741,143,1.108,199,0.569,209,1.859,218,1.406,227,2.141,271,1.432,272,2.673,276,1.245,304,1.56,311,1.85,316,1.715,349,2.879,356,0.712,358,1.001,395,3.043,400,1.56,403,1.33,406,3.435,426,1.172,465,1.56,514,1.56,531,1.052,535,3.802,539,3.385,541,3.55,542,2.812,544,2.16,545,0.954,546,2.326,547,1.56,548,1.731,549,1.33,550,1.731,552,2.326,559,1.731,561,1.56,562,1.108,564,1.731,611,2.767,621,3.55,626,3.199,627,3.199,628,3.199,629,3.381,630,3.199,653,1.56,675,1.56,720,2.939,799,1.731,832,1.8,871,1.33,877,3.55,879,1.731,882,1.33,896,3.802,914,1.731,933,1.432,939,3.699,946,1.56,982,2.727,1008,2.326,1011,1.731,1030,2.022,1035,1.56,1036,1.432,1037,1.731,1060,1.731,1062,1.731,1063,2.812,1064,4.701,1065,1.991,1066,1.991,1067,2.533,1068,1.991,1069,3.234,1070,1.991,1071,3.234,1072,1.991,1073,1.991,1074,1.991,1075,1.991,1076,1.991,1077,1.991,1078,1.991,1079,1.991,1080,1.991,1081,1.991,1082,1.731,1083,1.991,1084,1.991,1085,1.991,1086,1.991,1087,1.991,1088,1.991,1089,1.731,1090,3.234,1091,1.991,1092,1.991,1093,1.991,1094,1.991,1095,1.991,1096,1.731,1097,3.234,1098,1.991,1099,3.234,1100,1.991,1101,3.234,1102,1.991,1103,3.234,1104,1.991,1105,3.234,1106,1.991,1107,3.234,1108,1.991,1109,3.234,1110,1.991,1111,1.991,1112,1.991,1113,3.234,1114,1.991,1115,1.991,1116,1.991,1117,1.731,1118,1.991,1119,1.991,1120,1.991]],["title/classes/RefreshTokenDto.html",[51,0.032,213,2.485]],["body/classes/RefreshTokenDto.html",[3,0.194,4,0.172,5,0.172,9,0.38,20,0.594,23,0.014,25,0.38,36,1.804,38,0.261,50,0.194,51,0.055,77,0.012,78,0.012,85,1.804,213,4.24,214,1.6,375,2.255,388,3.582,390,2.351,476,4.529,699,6.345,776,4.384,1121,5.896,1122,4.865,1123,5.596]],["title/injectables/RefreshTokensProvider.html",[40,0.422,251,2.485]],["body/injectables/RefreshTokensProvider.html",[3,0.12,4,0.107,5,0.107,9,0.236,10,1.058,11,1.59,13,1.733,15,1.364,16,2.72,17,5.69,18,4.776,19,4.519,20,0.525,22,1.058,23,0.014,24,0.843,25,0.336,26,0.748,31,0.715,34,1.834,38,0.339,39,1.703,40,0.525,41,2.17,42,0.483,43,1.59,44,2.17,46,2.17,50,0.12,51,0.028,53,1.445,54,2.497,57,1.77,60,2.17,64,1.458,65,1.151,66,1.522,68,1.774,69,3.018,72,1.522,73,0.77,77,0.008,78,0.008,80,1.834,83,1.649,87,2.497,199,0.993,209,1.59,210,3.876,212,3.876,213,4.152,218,1.195,224,1.932,235,2.72,236,2.318,242,2.497,249,4.043,251,3.093,255,2.043,262,2.72,264,2.318,272,3.434,276,2.17,278,2.497,279,2.318,316,1.458,337,2.912,549,2.318,553,2.497,673,3.018,677,2.72,690,3.018,692,3.018,693,3.018,694,3.018,695,3.018,696,3.018,697,3.018,759,3.018,769,2.72,774,3.018,1124,5.012,1125,3.471,1126,3.471,1127,3.471,1128,3.471,1129,3.471]],["title/classes/SignInDto.html",[51,0.032,220,2.485]],["body/classes/SignInDto.html",[3,0.185,4,0.164,5,0.164,9,0.363,20,0.7,23,0.014,25,0.448,36,1.986,38,0.249,50,0.185,51,0.054,77,0.011,78,0.011,85,1.754,86,3.135,181,3.981,214,1.886,220,4.123,375,2.154,388,3.778,390,2.246,476,4.405,601,5.734,1122,4.648,1130,4.648,1131,5.346,1132,5.346,1133,5.346]],["title/injectables/SignInProvider.html",[40,0.422,252,2.485]],["body/injectables/SignInProvider.html",[3,0.128,4,0.114,5,0.114,9,0.251,10,1.105,11,1.644,13,1.644,15,1.426,20,0.549,22,1.105,23,0.014,24,0.881,25,0.351,26,0.782,31,0.761,38,0.317,39,1.657,40,0.549,41,2.31,42,0.514,50,0.128,51,0.03,53,1.372,57,1.322,64,2.172,65,1.714,66,1.619,68,1.835,72,1.619,73,0.819,77,0.009,78,0.009,83,1.478,181,2.877,199,1.057,209,1.644,211,4.05,218,1.272,219,4.05,220,4.25,230,2.894,242,2.657,248,4.108,249,4.108,252,3.232,255,2.174,264,2.467,271,2.657,272,3.38,276,2.31,278,2.657,279,2.467,290,2.894,316,1.552,335,3.212,337,3.043,340,3.212,373,1.374,420,1.951,529,2.657,553,2.657,611,2.174,640,2.657,769,2.894,1134,5.185,1135,3.212,1136,3.694,1137,3.694,1138,3.694,1139,5.169,1140,5.963,1141,3.694,1142,3.694,1143,3.694,1144,3.694,1145,3.694,1146,3.694]],["title/entities/Tag.html",[562,2.213,831,1.906]],["body/entities/Tag.html",[3,0.109,4,0.097,5,0.097,9,0.213,20,0.779,23,0.014,24,1.022,25,0.524,26,1.009,36,1.95,38,0.215,50,0.109,51,0.025,74,3.514,77,0.008,78,0.008,85,1.224,88,1.47,89,2.288,214,2.097,227,2.053,356,1.124,373,2.027,399,3.918,403,3.638,404,3.638,406,1.849,420,3.168,430,3.927,562,2.562,565,4.314,831,2.611,833,1.964,835,4.268,836,4.268,837,4.268,839,3.638,841,4.264,842,4.896,846,4.002,849,4.268,851,2.461,852,4.604,856,3.606,956,5.215,958,4.798,959,4.798,960,3.606,969,4.002,972,2.731,976,4.002,979,4.002,982,3.638,1117,4.002,1147,2.731,1148,5.448,1149,3.142,1150,5.448,1151,3.142,1152,3.142,1153,3.142,1154,3.142,1155,3.142,1156,3.142,1157,3.142,1158,3.142,1159,3.142,1160,3.142,1161,3.142,1162,3.142,1163,3.142,1164,3.142,1165,3.142]],["title/controllers/TagsController.html",[91,1.422,1166,2.859]],["body/controllers/TagsController.html",[3,0.139,4,0.124,5,0.124,9,0.274,10,1.173,11,1.996,20,0.663,22,1.334,23,0.014,24,1.064,25,0.424,26,0.944,31,1.286,38,0.291,42,0.561,50,0.139,51,0.033,53,0.927,73,1.384,77,0.009,78,0.009,88,2.311,89,2.816,91,1.442,93,1.56,97,2.691,207,2.372,209,2.107,214,1.785,218,1.89,224,2.243,227,1.921,311,1.964,406,2.372,539,3.475,545,1.931,567,4.833,865,3.503,1008,5.42,1026,4.891,1028,2.898,1067,3.157,1166,3.947,1167,3.503,1168,4.772,1169,3.503,1170,4.029,1171,4.029,1172,3.503,1173,5.489,1174,4.029,1175,3.503,1176,3.503,1177,4.029,1178,4.029,1179,4.029,1180,4.029,1181,4.029,1182,4.029,1183,4.029]],["title/modules/TagsModule.html",[98,1.369,115,2.485]],["body/modules/TagsModule.html",[3,0.168,4,0.149,5,0.149,23,0.014,38,0.348,42,0.677,50,0.168,51,0.039,77,0.011,78,0.011,93,2.405,98,2.358,100,2.226,101,2.226,102,2.443,103,2.443,104,2.226,105,3.441,106,3.441,115,4.847,118,3.122,119,2.443,120,2.443,122,2.706,126,3.039,127,1.808,539,4.501,562,2.706,1166,4.925,1176,4.226,1184,4.226,1185,4.226,1186,4.226,1187,4.861,1188,4.861,1189,4.226,1190,4.861]],["title/injectables/TagsService.html",[40,0.422,539,2.213]],["body/injectables/TagsService.html",[3,0.121,4,0.107,5,0.107,9,0.237,10,1.061,11,2.115,13,0.962,15,1.369,20,0.707,22,1.422,23,0.014,24,1.134,25,0.452,26,1.006,31,1.297,38,0.31,39,0.894,40,0.527,42,0.486,50,0.121,51,0.028,53,0.802,57,1.776,68,1.938,73,1.396,74,2.379,77,0.011,78,0.008,88,2.363,89,2.795,127,1.297,199,0.997,209,2.115,218,2.168,311,1.776,349,2.884,356,1.248,358,1.753,406,2.052,539,2.762,545,1.671,562,1.941,567,4.443,1008,3.569,1067,3.888,1082,4.315,1168,4.315,1169,4.315,1172,4.315,1175,3.032,1189,3.032,1191,3.032,1192,4.963,1193,3.487,1194,3.487,1195,5.779,1196,3.487,1197,3.487,1198,4.963,1199,3.487,1200,3.487,1201,3.487,1202,3.487,1203,3.487,1204,3.487,1205,3.487,1206,3.487,1207,3.487,1208,3.487]],["title/entities/Upload.html",[831,1.906,1209,2.34]],["body/entities/Upload.html",[3,0.123,4,0.109,5,0.109,9,0.241,20,0.776,23,0.014,24,0.994,25,0.537,36,1.942,37,1.871,38,0.234,50,0.123,51,0.029,77,0.009,78,0.009,85,1.335,88,2.025,89,2.449,196,3.138,214,2.088,356,1.268,420,3.977,430,3.732,489,4.967,794,3.893,831,2.406,833,2.215,835,4.567,836,4.567,837,4.567,839,3.893,841,4.47,842,5.029,849,4.567,852,4.642,958,5.251,959,5.251,960,5.445,1209,2.954,1210,3.08,1211,4.567,1212,4.567,1213,3.543,1214,3.543,1215,5.019,1216,3.543,1217,3.543,1218,3.543,1219,3.543,1220,4.192,1221,3.543,1222,3.543,1223,2.775,1224,2.775,1225,3.08]],["title/interfaces/UploadFile.html",[79,2.1,1226,2.655]],["body/interfaces/UploadFile.html",[3,0.175,4,0.156,5,0.156,9,0.344,23,0.014,24,1.249,25,0.542,36,2.124,38,0.236,50,0.175,77,0.011,78,0.011,79,2.676,81,3.384,85,1.696,88,2.23,794,4.893,1211,5.74,1212,5.74,1220,5.269,1223,3.969,1224,3.969,1226,4.26,1227,4.405,1228,4.405]],["title/injectables/UploadToAwsProvider.html",[40,0.422,1229,2.485]],["body/injectables/UploadToAwsProvider.html",[3,0.124,4,0.11,5,0.207,9,0.243,10,1.082,11,1.618,13,1.758,15,1.395,20,0.623,22,1.254,23,0.014,24,1.146,25,0.398,26,0.887,31,1.042,32,1.893,36,0.953,38,0.313,39,0.919,40,0.537,42,0.499,43,1.641,50,0.124,51,0.029,53,0.824,55,3.964,57,2.405,64,1.505,65,1.945,66,1.571,68,1.103,72,1.571,73,1.301,77,0.009,78,0.009,129,4.483,199,1.025,209,1.618,218,1.234,224,1.995,316,1.505,337,2.109,611,2.109,640,2.577,644,3.116,794,3.38,966,5.1,988,3.116,1209,2.109,1229,3.163,1230,5.541,1231,3.116,1232,5.06,1233,5.06,1234,3.583,1235,5.06,1236,5.466,1237,3.583,1238,5.06,1239,3.583,1240,5.541,1241,2.807,1242,3.116,1243,3.583,1244,3.583,1245,4.399,1246,3.583,1247,3.583,1248,3.583,1249,3.583,1250,3.583,1251,3.583,1252,3.583,1253,3.116,1254,3.583,1255,5.541,1256,3.583,1257,3.583,1258,3.583,1259,3.583,1260,5.06,1261,3.583,1262,3.583,1263,3.583,1264,3.583,1265,3.583]],["title/controllers/UploadsController.html",[91,1.422,1266,2.859]],["body/controllers/UploadsController.html",[3,0.15,4,0.133,5,0.199,9,0.294,10,1.232,13,1.195,15,1.195,20,0.46,22,0.926,23,0.014,24,1.104,25,0.391,26,0.655,31,0.893,38,0.335,39,1.111,42,0.603,45,4.326,50,0.15,51,0.035,53,0.996,60,2.709,65,1.911,73,0.961,77,0.01,78,0.01,91,1.55,93,1.677,207,2.55,209,1.786,214,1.239,227,1.333,332,2.709,373,2.144,394,2.077,398,3.394,412,4.145,1032,4.515,1045,3.394,1209,3.392,1226,3.849,1236,5.074,1266,4.145,1267,3.767,1268,4.333,1269,3.767,1270,4.333,1271,4.333,1272,4.333,1273,4.333,1274,4.333,1275,3.767,1276,4.333,1277,3.767,1278,5.764,1279,4.316,1280,3.767,1281,4.333,1282,4.333,1283,4.333,1284,4.333,1285,3.767,1286,3.767,1287,4.333,1288,4.333,1289,4.333]],["title/modules/UploadsModule.html",[98,1.369,116,2.655]],["body/modules/UploadsModule.html",[3,0.167,4,0.148,5,0.148,23,0.014,38,0.355,42,0.671,50,0.167,51,0.039,77,0.011,78,0.011,93,2.39,98,2.348,100,2.206,101,2.206,102,2.42,103,2.42,104,2.206,105,3.426,106,2.42,116,5.233,118,3.104,119,2.42,120,2.42,122,2.68,126,3.011,127,1.791,1209,2.834,1229,4.756,1266,4.903,1279,4.756,1280,4.187,1290,4.187,1291,4.187,1292,4.816,1293,4.816,1294,4.816,1295,4.187,1296,4.187,1297,4.816]],["title/injectables/UploadsService.html",[40,0.422,1279,2.485]],["body/injectables/UploadsService.html",[3,0.12,4,0.106,5,0.177,9,0.235,10,1.054,11,1.586,13,1.586,15,1.36,20,0.524,22,1.054,23,0.014,24,1.13,25,0.426,26,0.746,31,0.712,38,0.338,39,1.475,40,0.524,42,0.481,43,1.583,50,0.12,51,0.028,53,1.323,57,2.057,64,2.415,65,1.906,66,1.515,68,1.518,72,1.515,73,0.766,77,0.008,78,0.008,127,1.286,129,4.536,199,0.988,209,1.586,218,1.19,313,3.547,316,2.072,337,2.034,349,2.872,355,2.485,356,1.237,358,1.737,372,2.707,412,2.485,544,2.308,553,2.485,794,2.308,1209,3.691,1211,3.864,1212,2.707,1220,2.485,1223,2.707,1224,2.707,1225,3.005,1226,4.428,1229,4.536,1236,4.505,1240,3.005,1241,2.707,1253,4.288,1269,4.288,1279,3.083,1295,3.005,1296,3.005,1298,3.005,1299,3.456,1300,3.456,1301,5.75,1302,3.456,1303,3.456,1304,3.456,1305,3.456,1306,3.456,1307,2.707,1308,3.456,1309,3.456,1310,3.456,1311,3.456,1312,3.456,1313,3.456,1314,3.456,1315,3.456,1316,3.456,1317,3.456,1318,3.456,1319,3.456]],["title/entities/User.html",[83,1.137,831,1.906]],["body/entities/User.html",[3,0.122,4,0.108,5,0.108,9,0.239,20,0.758,23,0.014,25,0.522,26,1.049,36,2,38,0.271,50,0.122,51,0.041,74,3.324,77,0.009,78,0.009,83,1.429,85,1.328,86,2.546,88,1.595,89,2.44,181,3.232,214,2.04,227,2.134,356,1.259,363,3.631,365,3.631,367,3.631,392,2.071,420,3.339,565,3.592,831,2.394,833,2.2,839,3.879,841,4.459,842,5.022,851,2.757,852,4.632,958,5.408,959,5.242,982,3.879,1320,3.059,1321,7.289,1322,3.519,1323,3.519,1324,4.995,1325,3.519,1326,3.519,1327,3.519,1328,3.519,1329,3.519,1330,4.995,1331,3.519,1332,4.995,1333,5.807]],["title/controllers/UsersController.html",[91,1.422,305,2.655]],["body/controllers/UsersController.html",[3,0.095,4,0.084,5,0.084,9,0.186,10,0.888,20,0.595,22,1.198,23,0.014,24,1.081,25,0.461,26,0.848,31,1.154,38,0.324,42,0.381,50,0.095,51,0.022,53,0.63,65,1.377,73,1.406,77,0.007,78,0.007,88,2.332,91,0.98,93,1.06,97,1.829,187,3.612,207,1.611,208,1.524,209,2.014,214,1.603,224,1.524,227,1.278,232,1.712,234,1.969,239,1.969,272,2.567,291,2.145,302,3.503,303,3.612,305,2.774,373,2.359,374,3.503,377,3.353,379,4.235,380,3.529,382,4.39,391,2.774,394,1.312,405,1.829,420,2.96,426,3.995,516,2.988,545,1.991,554,3.612,614,1.829,722,4.235,933,4.56,934,2.38,947,4.882,1016,3.612,1025,3.612,1026,3.933,1027,4.364,1028,4.03,1032,3.254,1033,3.612,1034,2.38,1035,2.145,1036,1.969,1045,2.145,1275,2.38,1334,2.38,1335,5.604,1336,5.02,1337,4.154,1338,2.738,1339,4.154,1340,2.738,1341,2.738,1342,2.738,1343,2.738,1344,2.738,1345,2.738,1346,4.154,1347,4.154,1348,4.154,1349,2.738,1350,4.154,1351,4.154,1352,2.738,1353,4.154,1354,4.154,1355,4.154,1356,2.738,1357,4.154,1358,3.612,1359,2.738,1360,2.738,1361,2.738,1362,2.738,1363,2.738,1364,2.738,1365,2.38,1366,2.38,1367,5.02,1368,2.145,1369,2.738,1370,2.738,1371,2.738,1372,2.738,1373,2.738,1374,2.738,1375,2.738,1376,2.738,1377,2.738,1378,2.738,1379,2.738,1380,2.738,1381,2.738,1382,2.738,1383,2.738,1384,2.738]],["title/injectables/UsersCreateManyProvider.html",[40,0.422,1385,2.485]],["body/injectables/UsersCreateManyProvider.html",[3,0.122,4,0.108,5,0.108,9,0.239,10,1.068,11,1.601,13,0.97,15,1.377,20,0.531,22,1.068,23,0.014,24,0.851,25,0.339,26,0.756,31,0.725,38,0.295,39,0.902,40,0.531,42,0.49,50,0.122,51,0.029,53,0.809,57,2.389,64,2.44,65,1.925,66,2.546,68,2.134,72,2.546,73,0.78,77,0.009,78,0.009,83,1.808,183,2.35,199,1.006,209,1.601,218,1.212,301,2.757,311,2.262,316,2.44,355,2.53,356,1.259,357,2.071,373,1.858,374,4.174,377,2.35,545,1.687,611,2.071,634,2.757,1028,3.592,1368,2.757,1385,3.123,1386,5.049,1387,3.059,1388,4.343,1389,3.519,1390,7.289,1391,3.519,1392,4.343,1393,3.519,1394,4.995,1395,4.995,1396,3.519,1397,3.519,1398,4.343,1399,3.519,1400,3.059,1401,4.995,1402,3.519,1403,4.995,1404,3.519,1405,3.519,1406,3.519,1407,3.519,1408,3.519,1409,3.519,1410,3.519,1411,3.519,1412,3.519,1413,3.519,1414,3.519,1415,3.519,1416,3.519,1417,4.995,1418,3.519,1419,4.995,1420,4.995,1421,3.519]],["title/modules/UsersModule.html",[98,1.369,117,2.34]],["body/modules/UsersModule.html",[3,0.129,4,0.114,5,0.114,23,0.014,38,0.364,42,0.518,43,1.704,50,0.129,51,0.03,77,0.009,78,0.009,83,1.486,93,2.011,98,2.061,100,1.704,101,1.704,102,1.87,103,1.87,104,1.704,105,3.009,106,3.009,110,3.248,117,4.702,118,2.611,119,1.87,120,1.87,122,2.071,126,2.326,127,1.384,128,2.915,255,3.058,272,3.553,305,3.998,311,1.331,343,4.414,345,3.058,357,2.19,596,3.248,605,4.414,658,4.414,666,4.414,1059,4.517,1366,3.235,1385,4.414,1422,3.235,1423,3.235,1424,3.235,1425,3.721,1426,3.721,1427,3.235,1428,4.517,1429,5.195,1430,3.235,1431,3.721,1432,3.721,1433,3.235,1434,3.721,1435,3.721,1436,3.721,1437,3.721]],["title/injectables/UsersService.html",[40,0.422,272,1.821]],["body/injectables/UsersService.html",[3,0.113,4,0.062,5,0.062,9,0.136,10,0.696,11,2.007,13,1.534,15,0.898,20,0.648,22,1.304,23,0.014,24,1.04,25,0.414,26,0.923,31,1.207,34,1.061,36,1.479,37,1.061,38,0.32,39,1.426,40,0.346,42,0.28,50,0.07,51,0.038,53,1.279,64,1.726,65,1.567,66,1.428,68,1.599,72,0.881,73,1.233,77,0.006,78,0.006,83,1.994,86,0.881,88,2.014,89,2.182,127,0.747,183,2.744,199,0.575,209,2.052,218,1.915,226,1.747,272,1.492,304,2.552,311,1.47,316,1.985,343,3.815,345,1.917,347,2.832,348,1.342,349,2.379,351,2.176,352,2.832,353,3.469,356,0.719,357,1.182,358,1.01,359,1.747,360,1.747,361,1.342,367,1.256,373,1.528,374,3.248,377,1.342,379,3.715,380,2.891,391,1.342,405,1.342,426,2.418,529,1.445,544,1.342,545,1.561,552,3.399,596,2.037,605,3.815,606,2.832,609,2.832,611,1.917,615,2.832,626,1.574,627,1.574,628,1.574,629,1.445,630,1.574,631,1.747,632,1.747,658,3.662,661,3.572,663,2.832,665,1.574,666,2.955,668,2.832,670,2.832,675,3.219,722,3.715,749,1.574,767,2.832,933,2.955,990,2.832,1036,1.445,1063,3.572,1089,1.747,1255,1.747,1358,2.832,1365,1.747,1368,1.574,1385,3.815,1388,2.832,1392,2.832,1398,2.832,1427,1.747,1428,2.832,1430,1.747,1433,1.747,1438,1.747,1439,2.832,1440,3.258,1441,3.258,1442,3.258,1443,4.726,1444,2.009,1445,2.009,1446,2.009,1447,2.009,1448,2.009,1449,2.009,1450,2.009,1451,2.009,1452,3.258,1453,2.009,1454,3.258,1455,3.258,1456,2.009,1457,3.258,1458,2.009,1459,2.009,1460,2.009,1461,2.009,1462,2.009,1463,2.009,1464,2.009,1465,2.009,1466,2.009,1467,2.009,1468,2.009,1469,2.009,1470,2.009,1471,2.009,1472,2.009,1473,2.009,1474,2.009,1475,2.009]],["title/coverage.html",[1476,4.261]],["body/coverage.html",[0,2.291,1,1.43,5,0.066,6,1.862,7,1.54,8,1.862,23,0.014,25,0.145,40,0.808,48,1.54,51,0.057,65,0.71,77,0.006,78,0.006,79,2.591,80,1.131,82,1.43,83,1.227,84,1.862,91,2.236,92,1.54,94,1.862,95,1.339,104,0.981,121,1.678,142,1.131,143,1.909,149,1.54,151,1.54,153,1.678,157,1.678,200,1.862,205,1.54,206,1.862,208,1.192,213,1.339,220,1.339,227,1.056,228,1.339,248,1.192,249,1.192,250,1.339,251,1.339,252,1.339,254,1.54,258,1.54,270,1.862,272,0.981,282,1.862,292,1.678,305,1.43,311,0.766,325,1.862,343,1.339,344,2.687,345,2.019,346,2.687,353,1.43,374,1.339,376,2.687,377,1.43,378,1.862,379,1.43,380,1.192,395,1.261,396,1.862,397,2.687,416,1.339,483,1.678,531,2.591,532,1.862,535,1.339,536,1.862,537,1.862,539,1.192,562,1.192,567,1.43,568,1.862,569,1.862,581,2.687,596,2.144,605,1.339,607,1.339,641,1.862,642,1.862,658,1.339,659,2.687,660,1.862,666,1.339,667,1.862,676,1.678,677,2.687,707,1.54,708,2.687,709,2.687,717,1.339,718,1.54,720,1.339,722,1.43,723,1.862,724,1.862,729,1.862,730,1.862,735,1.43,742,1.862,743,1.862,775,1.862,776,2.687,778,1.862,779,1.862,780,1.862,816,1.862,831,2.572,832,1.192,834,1.862,857,1.54,858,1.862,861,1.339,873,1.862,874,1.862,882,1.43,883,1.862,896,1.339,899,1.862,932,1.862,939,1.43,940,1.862,947,1.54,948,1.862,951,1.862,994,1.54,995,1.862,1030,1.339,1038,1.678,1039,1.678,1062,1.862,1121,1.862,1124,1.862,1130,1.862,1134,1.862,1135,1.862,1147,1.862,1166,1.54,1167,1.862,1191,1.862,1209,1.261,1210,1.862,1226,1.43,1227,1.862,1228,1.862,1229,1.339,1230,1.862,1231,1.862,1266,1.54,1267,1.862,1279,1.339,1298,1.862,1320,1.862,1334,1.862,1385,1.339,1386,1.862,1387,1.862,1438,1.862,1439,1.862,1476,1.678,1477,2.142,1478,2.142,1479,2.142,1480,8.235,1481,7.525,1482,1.862,1483,4.905,1484,1.862,1485,6.445,1486,6.611,1487,7.478,1488,2.982,1489,1.862,1490,1.862,1491,5.726,1492,5.726,1493,1.862,1494,2.142,1495,2.142,1496,2.142,1497,4.29,1498,2.142,1499,2.142,1500,1.862,1501,1.678,1502,1.862,1503,1.862,1504,1.862,1505,1.862,1506,1.862,1507,4.265,1508,4.265,1509,4.265,1510,1.862,1511,1.862,1512,1.862,1513,1.862,1514,2.142]],["title/dependencies.html",[101,2.192,1515,2.881]],["body/dependencies.html",[23,0.014,42,0.671,43,2.206,44,3.011,45,3.216,51,0.05,77,0.011,78,0.011,101,2.206,125,3.463,127,1.791,208,2.68,299,4.187,313,3.463,336,3.773,345,2.834,356,1.723,390,2.023,392,2.834,394,2.308,653,3.773,751,4.187,791,3.773,792,3.773,950,4.187,1241,3.773,1242,4.187,1245,4.187,1277,4.187,1516,4.816,1517,4.816,1518,4.816,1519,7.191,1520,4.816,1521,4.816,1522,4.816,1523,4.816,1524,4.816,1525,4.816,1526,4.816,1527,4.816,1528,4.816,1529,4.816,1530,4.816,1531,4.816,1532,4.816,1533,4.816,1534,4.816,1535,4.816,1536,4.816,1537,4.816,1538,4.816,1539,4.816,1540,4.816,1541,4.816,1542,4.816,1543,4.816]],["title/miscellaneous/enumerations.html",[1544,2.071,1545,4.16]],["body/miscellaneous/enumerations.html",[9,0.35,23,0.014,77,0.011,78,0.011,227,1.983,232,4.029,291,4.035,401,5.049,412,4.635,426,3.793,427,5.603,431,5.603,459,5.049,460,5.603,461,5.603,462,5.603,490,5.603,510,5.76,1220,4.635,1285,4.478,1544,3.22,1545,4.478,1546,5.151,1547,6.445,1548,5.151,1549,6.445,1550,5.151,1551,5.151,1552,5.151,1553,5.151,1554,5.151,1555,5.151]],["title/miscellaneous/functions.html",[1544,2.071,1556,4.16]],["body/miscellaneous/functions.html",[9,0.358,22,1.398,23,0.013,24,1.115,25,0.444,26,0.989,31,1.464,32,3.454,77,0.011,78,0.011,104,3.256,129,4.088,161,4.131,197,4.131,749,4.131,1482,4.584,1484,5.686,1493,4.584,1500,4.584,1501,5.123,1502,5.686,1503,6.18,1504,4.584,1505,5.686,1506,5.686,1544,3.297,1556,4.584,1557,5.273,1558,5.273,1559,5.273,1560,5.273,1561,5.273,1562,6.539,1563,5.273]],["title/index.html",[9,0.225,1564,3.313,1565,3.313]],["body/index.html",[4,0.142,23,0.014,77,0.01,78,0.01,197,3.627,302,4.183,349,2.12,373,1.722,551,3.329,629,3.329,793,4.025,1021,4.025,1096,4.025,1286,4.025,1307,3.627,1400,4.025,1476,3.627,1501,5.241,1566,4.629,1567,4.629,1568,6.02,1569,4.629,1570,4.629,1571,4.629,1572,4.629,1573,4.629,1574,4.629,1575,4.629,1576,7.666,1577,4.629,1578,4.629,1579,7.528,1580,4.629,1581,6.02,1582,4.629,1583,4.629,1584,4.629,1585,4.629,1586,6.02,1587,6.02,1588,4.629,1589,4.629,1590,4.629,1591,6.02,1592,6.02,1593,4.629,1594,4.629,1595,4.629,1596,4.629,1597,4.629,1598,4.629,1599,4.629,1600,4.629,1601,4.629,1602,4.629,1603,4.629,1604,4.629,1605,4.629,1606,4.629,1607,4.629,1608,4.629,1609,4.629,1610,4.629,1611,4.025]],["title/modules.html",[100,2.491]],["body/modules.html",[23,0.011,77,0.011,78,0.011,99,3.898,100,2.482,110,3.388,111,3.62,112,3.388,113,3.388,114,3.62,115,3.388,116,3.62,117,3.19,1307,6.329,1612,8.079,1613,8.079,1614,8.079]],["title/overview.html",[1615,4.728]],["body/overview.html",[2,2.18,23,0.014,77,0.008,78,0.008,81,2.025,93,1.173,95,3.336,98,1.044,99,5.668,100,1.388,101,1.388,102,1.524,103,1.524,104,1.388,105,1.524,106,1.524,107,2.636,108,2.636,109,2.636,110,4.793,111,4.4,112,4.118,113,4.261,114,5.12,115,4.261,116,4.552,117,4.571,118,2.253,119,1.524,120,1.524,199,0.867,228,4.261,245,2.636,246,2.636,247,2.636,248,3.282,249,2.97,250,3.336,251,3.336,252,3.336,272,3.122,343,3.336,375,1.222,450,2.375,517,2.636,535,3.336,539,3.794,605,3.336,607,4.261,658,3.336,666,3.336,784,2.636,785,2.636,786,2.636,833,1.895,861,3.336,867,2.636,868,2.636,893,2.636,894,2.636,895,2.636,896,4.261,1030,3.336,1052,2.636,1054,2.636,1184,2.636,1185,2.636,1186,2.636,1229,3.336,1279,3.336,1290,2.636,1291,2.636,1385,3.336,1422,2.636,1423,2.636,1424,2.636,1615,2.636,1616,3.031,1617,3.031,1618,3.031,1619,3.031,1620,3.031]],["title/properties.html",[85,1.272,1515,2.881]],["body/properties.html",[23,0.014,77,0.012,78,0.012,85,1.642,373,2.297,551,4.44,1611,5.367,1621,6.173,1622,6.173,1623,6.173]],["title/miscellaneous/variables.html",[1544,2.071,1624,4.16]],["body/miscellaneous/variables.html",[9,0.263,23,0.014,25,0.485,28,2.782,34,2.043,36,1.42,37,2.043,48,3.839,57,1.91,71,3.364,73,0.858,77,0.009,78,0.009,80,2.819,83,1.748,86,2.679,121,3.031,157,4.182,158,3.364,181,3.402,196,4.736,208,2.971,232,3.337,292,4.182,297,4.641,363,3.821,365,4.119,419,5.729,510,5.448,1038,4.182,1039,3.031,1488,3.364,1489,4.641,1490,3.364,1507,3.364,1508,6.011,1509,6.011,1510,4.641,1511,4.641,1512,4.641,1513,4.641,1544,2.419,1624,3.364,1625,3.869,1626,3.869,1627,5.338,1628,6.589,1629,3.869,1630,3.869,1631,5.338,1632,3.869,1633,3.869,1634,3.869,1635,3.869,1636,3.869,1637,6.112,1638,6.589,1639,6.112,1640,6.112]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1480,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1622,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1481,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1494,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1486,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1487,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1491,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1492,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1497,"title":{},"body":{"coverage.html":{}}}],["07",{"_index":433,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":516,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["1.1.25",{"_index":1517,"title":{},"body":{"dependencies.html":{}}}],["1.4.11",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":1496,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":934,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1519,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["1024",{"_index":960,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["10})@apiquery({name",{"_index":1356,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":728,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":726,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["128",{"_index":1215,"title":{},"body":{"entities/Upload.html":{}}}],["14",{"_index":1619,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1495,"title":{},"body":{"coverage.html":{}}}],["17.13.3",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":513,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":517,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["2.0.2",{"_index":1518,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["2.1668.0",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1016,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":1003,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":432,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23",{"_index":1618,"title":{},"body":{"overview.html":{}}}],["2525",{"_index":805,"title":{},"body":{"modules/MailModule.html":{}}}],["256",{"_index":969,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.1.10",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["3/9",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["30t07:46:32",{"_index":501,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["30t07:46:32'})@isoptional()@isstring()@isiso8601({strict",{"_index":434,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["30t07:46:32+0000",{"_index":500,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["33",{"_index":1498,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1620,"title":{},"body":{"overview.html":{}}}],["5",{"_index":1617,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["512",{"_index":976,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["6.9.14",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["7.4.0",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1616,"title":{},"body":{"overview.html":{}}}],["8.12.0",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":450,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["9.13.0",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["96",{"_index":1321,"title":{},"body":{"entities/User.html":{}}}],["_",{"_index":75,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["aa",{"_index":589,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":781,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":290,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["accesstoken",{"_index":698,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["accesstokenguard",{"_index":1,"title":{"guards/AccessTokenGuard.html":{}},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["actions",{"_index":991,"title":{},"body":{"entities/Post.html":{}}}],["activeuser",{"_index":1038,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activeuserdata",{"_index":80,"title":{"interfaces/ActiveUserData.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["adapter",{"_index":814,"title":{},"body":{"modules/MailModule.html":{}}}],["added",{"_index":1114,"title":{},"body":{"injectables/PostsService.html":{}}}],["against",{"_index":522,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["already",{"_index":633,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["amazing",{"_index":1598,"title":{},"body":{"index.html":{}}}],["api",{"_index":1358,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["apiheaders",{"_index":1278,"title":{},"body":{"controllers/UploadsController.html":{}}}],["apioperation",{"_index":1032,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":1001,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":393,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@minlength(3)@maxlength(256",{"_index":574,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":446,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":423,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":468,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":381,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["apipropertyoptional",{"_index":486,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":576,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":570,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":572,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":418,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1367,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1033,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":1034,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":1042,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1371,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiversion",{"_index":656,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["app",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app.controller",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_guard",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["appconfig",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":92,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcreate",{"_index":1484,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["appcreate(app",{"_index":1561,"title":{},"body":{"miscellaneous/functions.html":{}}}],["application",{"_index":1373,"title":{},"body":{"controllers/UsersController.html":{}}}],["application'})@apiresponse({status",{"_index":1349,"title":{},"body":{"controllers/UsersController.html":{}}}],["application.helper.ts",{"_index":1502,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["applications",{"_index":1573,"title":{},"body":{"index.html":{}}}],["apply",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":99,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":95,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":312,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["assign",{"_index":1116,"title":{},"body":{"injectables/PostsService.html":{}}}],["assigned",{"_index":298,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":692,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["auth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"controllers/UsersController.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["auth(authtype.none",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":256,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/config/jwt.config",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/google",{"_index":731,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["auth/guards/access",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guards/authentication/authentication.guard",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_type_key",{"_index":292,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":205,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":733,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authenticate(@body",{"_index":740,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authenticate(googletokendto",{"_index":734,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["authentication",{"_index":732,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.controller",{"_index":267,"title":{},"body":{"modules/AuthModule.html":{}}}],["authentication.controller.ts",{"_index":730,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["authentication.controller.ts:18",{"_index":736,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["authentication.service.ts",{"_index":743,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:17",{"_index":746,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:34",{"_index":748,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authentication.service.ts:40",{"_index":747,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authenticationguard",{"_index":149,"title":{"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["authenticationguard.defaultauthtype",{"_index":310,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authmodule",{"_index":110,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":551,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":555,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["authorised",{"_index":773,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["authorization",{"_index":1284,"title":{},"body":{"controllers/UploadsController.html":{}}}],["authservice",{"_index":228,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["authtype",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["authtype.bearer",{"_index":293,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtype.none",{"_index":296,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypeguardmap",{"_index":283,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["authtypes",{"_index":297,"title":{},"body":{"guards/AuthenticationGuard.html":{},"miscellaneous/variables.html":{}}}],["authtypes.map((type",{"_index":314,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["autoloadentities",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":504,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["available",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["avoid",{"_index":503,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["await",{"_index":68,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1241,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["aws.provider",{"_index":1295,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["aws.provider.ts",{"_index":1231,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["aws.provider.ts:16",{"_index":1237,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:35",{"_index":1239,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["aws.provider.ts:8",{"_index":1234,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["backers",{"_index":1599,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":544,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('mime",{"_index":1312,"title":{},"body":{"injectables/UploadsService.html":{}}}],["badrequestexception('please",{"_index":560,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["badrequestexception('the",{"_index":1089,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["based",{"_index":554,"title":{},"body":{"injectables/CreatePostProvider.html":{},"controllers/UsersController.html":{}}}],["baseurl",{"_index":916,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":336,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":342,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":339,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":341,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":258,"title":{"injectables/BcryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["bearer",{"_index":1285,"title":{},"body":{"controllers/UploadsController.html":{},"miscellaneous/enumerations.html":{}}}],["being",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["blog",{"_index":413,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/PostsController.html":{}}}],["body",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/RefreshTokensProvider.html":{},"controllers/TagsController.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":1141,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["bootstrap",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrapnestapplication",{"_index":1503,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1614,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1612,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1247,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["buffer",{"_index":329,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1569,"title":{},"body":{"index.html":{}}}],["business",{"_index":1441,"title":{},"body":{"injectables/UsersService.html":{}}}],["calculating",{"_index":921,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["callhandler",{"_index":648,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["canactivate(context",{"_index":27,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}}}],["careful",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["cascade",{"_index":856,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":847,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":72,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["catch((err",{"_index":323,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["cause",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["certain",{"_index":989,"title":{},"body":{"entities/Post.html":{}}}],["character",{"_index":599,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":595,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":561,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{}}}],["class",{"_index":51,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":375,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":1363,"title":{},"body":{"controllers/UsersController.html":{}}}],["clientid",{"_index":753,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["clientsecret",{"_index":755,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["cluster_appmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":784,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":785,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":786,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":867,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":868,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":893,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":894,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":895,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1052,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1053,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1054,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":1184,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":1185,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":1186,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule",{"_index":1290,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_uploadsmodule_providers",{"_index":1291,"title":{},"body":{"modules/UploadsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1422,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1424,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1423,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":852,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["column({type",{"_index":841,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["comes",{"_index":306,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["commit",{"_index":1410,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["common/interceptors/data",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["common/pagination/pagination.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":1139,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["comparepasswords",{"_index":326,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparepasswords(data",{"_index":328,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["complete",{"_index":1416,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["completeuser",{"_index":1510,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["compodoc/compodoc",{"_index":1516,"title":{},"body":{"dependencies.html":{}}}],["concatenate",{"_index":1262,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["concatenated",{"_index":1264,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["config",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"miscellaneous/functions.html":{}}}],["config.get('appconfig.mailhost",{"_index":803,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtppassword",{"_index":808,"title":{},"body":{"modules/MailModule.html":{}}}],["config.get('appconfig.smtpusername",{"_index":806,"title":{},"body":{"modules/MailModule.html":{}}}],["config/app.config",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["config/jwt.config",{"_index":262,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["config/profile.config",{"_index":1435,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1437,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"modules/MailModule.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"miscellaneous/functions.html":{}}}],["configservice.get('database.autoloadentities",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":19,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["confirmation",{"_index":1081,"title":{},"body":{"injectables/PostsService.html":{}}}],["conflictexception",{"_index":355,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1415,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception(error",{"_index":372,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/UploadsService.html":{}}}],["connect",{"_index":1398,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["connecting",{"_index":631,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["connection",{"_index":1420,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["const",{"_index":57,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":15,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":644,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/UploadToAwsProvider.html":{}}}],["constructor(datasource",{"_index":1389,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(jwtservice",{"_index":16,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["constructor(mailerservice",{"_index":818,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(metaoptionrepository",{"_index":875,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(postsrepository",{"_index":538,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["constructor(private",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":286,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["constructor(request",{"_index":901,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagsrepository",{"_index":1193,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(uploadsrepository",{"_index":1299,"title":{},"body":{"injectables/UploadsService.html":{}}}],["constructor(usersrepository",{"_index":348,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{}}}],["content",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/UploadsController.html":{}}}],["content'})@isoptional()@isstring",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["contenttype",{"_index":1252,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["context",{"_index":30,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/MailService.html":{}}}],["context.getclass",{"_index":309,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.gethandler",{"_index":308,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":58,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["controller",{"_index":91,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('auth/google",{"_index":739,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["controller('meta",{"_index":864,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":1041,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":1177,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('uploads",{"_index":1281,"title":{},"body":{"controllers/UploadsController.html":{}}}],["controller('users",{"_index":1370,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":505,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["correct",{"_index":1086,"title":{},"body":{"injectables/PostsService.html":{}}}],["coverage",{"_index":1476,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cratepostmetaoptionsdto",{"_index":520,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["creaatepostmetaoptionsdto",{"_index":524,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create",{"_index":311,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":865,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["create(createpostdto",{"_index":542,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":859,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":1169,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["created",{"_index":523,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["createdate",{"_index":835,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["createdatecolumn",{"_index":837,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["creategoogleuser",{"_index":347,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuser(googleuser",{"_index":352,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["creategoogleuserprovider",{"_index":343,"title":{"injectables/CreateGoogleUserProvider.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createmany",{"_index":1388,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmany(createmanyusersdto",{"_index":1392,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers",{"_index":1335,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1382,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(createmanyusers",{"_index":1338,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":374,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1404,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createparamdecorator",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":996,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":1000,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":395,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.tags.length",{"_index":558,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["createpostmetaoptionsdto",{"_index":416,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpostprovider",{"_index":535,"title":{"injectables/CreatePostProvider.html":{}},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["creates",{"_index":527,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["createtagdto",{"_index":567,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":606,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":609,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":380,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":620,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["createuserprovider",{"_index":605,"title":{"injectables/CreateUserProvider.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["createusers",{"_index":303,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":1380,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":1341,"title":{},"body":{"controllers/UsersController.html":{}}}],["ctx",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":90,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpage",{"_index":888,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":332,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"controllers/UploadsController.html":{}}}],["data.interface",{"_index":549,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["data.interface.ts",{"_index":84,"title":{},"body":{"interfaces/ActiveUserData.html":{},"coverage.html":{}}}],["data.ts",{"_index":1509,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["database.helper.ts",{"_index":1505,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["databaseconfig",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["dataresponseinterceptor",{"_index":151,"title":{"injectables/DataResponseInterceptor.html":{}},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["datasource",{"_index":1390,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["datbase",{"_index":637,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["date",{"_index":430,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["date().gettime().tostring().trim",{"_index":1263,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["datetime",{"_index":985,"title":{},"body":{"entities/Post.html":{}}}],["db",{"_index":553,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadsService.html":{}}}],["declarations",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"classes/GoogleTokenDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/Upload.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/auth.decorator",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["default",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"entities/Upload.html":{},"miscellaneous/variables.html":{}}}],["defaultauthtype",{"_index":285,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["defaults",{"_index":809,"title":{},"body":{"modules/MailModule.html":{}}}],["defaultvaluepipe",{"_index":1362,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1377,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1375,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":20,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":1008,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('/soft",{"_index":1173,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id",{"_index":1179,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":1067,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted",{"_index":1082,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":1148,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":1150,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":997,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":1050,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1007,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletion",{"_index":1163,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":101,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["description",{"_index":373,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":622,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["development",{"_index":1578,"title":{},"body":{"index.html":{}}}],["dir",{"_index":811,"title":{},"body":{"modules/MailModule.html":{}}}],["disable",{"_index":1020,"title":{},"body":{"controllers/PostsController.html":{}}}],["documentation",{"_index":1477,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":1119,"title":{},"body":{"injectables/PostsService.html":{}}}],["draft",{"_index":460,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dropdatabase",{"_index":1506,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dropdatabase(config",{"_index":1563,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dtos/create",{"_index":545,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1036,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/google",{"_index":738,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["dtos/pagination",{"_index":907,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/patch",{"_index":1035,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/refresh",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["dtos/signin.dto",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["duplicate",{"_index":566,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["e2e",{"_index":1588,"title":{},"body":{"index.html":{}}}],["each",{"_index":320,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":954,"title":{},"body":{"entities/Post.html":{}}}],["eagerly",{"_index":992,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1570,"title":{},"body":{"index.html":{}}}],["eight",{"_index":594,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ejs",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":795,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":86,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"injectables/MailService.html":{},"classes/SignInDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email.provider",{"_index":1430,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["email.provider.ts",{"_index":667,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:11",{"_index":669,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["email.provider.ts:20",{"_index":671,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["encrypted",{"_index":330,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":710,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["endpoint",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["endpoints",{"_index":300,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["endpont",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["ensure",{"_index":514,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["entire",{"_index":1161,"title":{},"body":{"entities/Tag.html":{}}}],["entities",{"_index":833,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":831,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":1353,"title":{},"body":{"controllers/UsersController.html":{}}}],["entry",{"_index":1315,"title":{},"body":{"injectables/UploadsService.html":{}}}],["enum",{"_index":489,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Upload.html":{}}}],["enumerations",{"_index":1545,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/auth",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{}}}],["enums/file",{"_index":1223,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["enums/poststatus.enum",{"_index":482,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":481,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["equal",{"_index":1084,"title":{},"body":{"injectables/PostsService.html":{}}}],["err",{"_index":324,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["error",{"_index":316,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["eslint",{"_index":1019,"title":{},"body":{"controllers/PostsController.html":{}}}],["eslint/no",{"_index":1022,"title":{},"body":{"controllers/PostsController.html":{}}}],["etract",{"_index":59,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["example",{"_index":302,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":623,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["exclude",{"_index":1333,"title":{},"body":{"entities/User.html":{}}}],["execution",{"_index":56,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["executioncontext",{"_index":28,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/DataResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":675,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":798,"title":{},"body":{"modules/MailModule.html":{},"controllers/PostsController.html":{}}}],["existinguser",{"_index":616,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["exists",{"_index":617,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["expect",{"_index":528,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["expiresin",{"_index":684,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["export",{"_index":50,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exposing",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["express",{"_index":45,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1236,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["extends",{"_index":721,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extension",{"_index":1260,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["extract",{"_index":55,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UploadToAwsProvider.html":{}}}],["extractrequestfromheader",{"_index":14,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["extractrequestfromheader(request",{"_index":33,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["faker.internet.email",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.firstname",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["faker.person.lastname",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":420,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["family_name",{"_index":765,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["featured",{"_index":411,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["fetch",{"_index":673,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["fetched",{"_index":1350,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":1346,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1249,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.interface",{"_index":1304,"title":{},"body":{"injectables/UploadsService.html":{}}}],["file.interface.ts",{"_index":1228,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["file.mimetype",{"_index":1253,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["file.originalname.split('.')[0",{"_index":1256,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["file.size",{"_index":1317,"title":{},"body":{"injectables/UploadsService.html":{}}}],["fileinterceptor",{"_index":1276,"title":{},"body":{"controllers/UploadsController.html":{}}}],["filename",{"_index":1255,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UsersService.html":{}}}],["filetypes",{"_index":1220,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["filetypes.image",{"_index":1225,"title":{},"body":{"entities/Upload.html":{},"injectables/UploadsService.html":{}}}],["fileupload",{"_index":1232,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["fileupload(file",{"_index":1235,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["finally",{"_index":1418,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["finalresponse",{"_index":926,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":552,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1063,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":1448,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(postquery",{"_index":1069,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":1192,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":1198,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonebyemail",{"_index":668,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":670,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid",{"_index":661,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleid(googleid",{"_index":663,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/UsersService.html":{}}}],["findonebygoogleidprovider",{"_index":658,"title":{"injectables/FindOneByGoogleIdProvider.html":{}},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["findonebyid",{"_index":1442,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1452,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemail",{"_index":1443,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneuserbyemailprovider",{"_index":666,"title":{"injectables/FindOneUserByEmailProvider.html":{}},"body":{"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["fire",{"_index":319,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["first",{"_index":890,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["firstname",{"_index":363,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["format",{"_index":509,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":672,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["framework",{"_index":1568,"title":{},"body":{"index.html":{}}}],["function",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1556,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":337,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["generatefilename",{"_index":1233,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatefilename(file",{"_index":1238,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["generatetokens",{"_index":678,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokens(user",{"_index":681,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["generatetokensprovider",{"_index":249,"title":{"injectables/GenerateTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["get('/:id",{"_index":1372,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1345,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":1012,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":201,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":998,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":1010,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":707,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["getpostsdto",{"_index":720,"title":{"classes/GetPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getting",{"_index":1564,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":1336,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":1344,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":722,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given_name",{"_index":764,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["global",{"_index":788,"title":{},"body":{"modules/MailModule.html":{}}}],["globally",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["google",{"_index":345,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["googleauthenticationcontroller",{"_index":254,"title":{"controllers/GoogleAuthenticationController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["googleauthenticationservice",{"_index":250,"title":{"injectables/GoogleAuthenticationService.html":{}},"body":{"modules/AuthModule.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["googleid",{"_index":367,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["googletokendto",{"_index":735,"title":{"classes/GoogleTokenDto.html":{}},"body":{"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["googletokendto.token",{"_index":763,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["googleuser",{"_index":353,"title":{"interfaces/GoogleUser.html":{}},"body":{"injectables/CreateGoogleUserProvider.html":{},"interfaces/GoogleUser.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["googleuser.email",{"_index":369,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.firstname",{"_index":364,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.googleid",{"_index":368,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["googleuser.lastname",{"_index":366,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["grow",{"_index":1595,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"overview.html":{}}}],["handle",{"_index":632,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["hash",{"_index":340,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashing.provider",{"_index":335,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SignInProvider.html":{}}}],["hashingprovider",{"_index":248,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/HashingProvider.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":327,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(data",{"_index":333,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["header",{"_index":61,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["hello",{"_index":203,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":1096,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["host",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["http://gravatar.com/profile/29292929/images/image1.jpg",{"_index":498,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://gravatar.com/profile/29292929/images/image1.jpg'})@isoptional()@isurl()@minlength(4)@maxlength(1024",{"_index":414,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000",{"_index":830,"title":{},"body":{"injectables/MailService.html":{}}}],["httpcode",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":1455,"title":{},"body":{"injectables/UsersService.html":{}}}],["https://${this.configservice.get('appconfig.awscloudfronturl')}/${name",{"_index":1316,"title":{},"body":{"injectables/UploadsService.html":{}}}],["https://nestjs.com",{"_index":1608,"title":{},"body":{"index.html":{}}}],["https://orkhan.gitbook.io/typeorm/docs/decorator",{"_index":1164,"title":{},"body":{"entities/Tag.html":{}}}],["https://schema.org",{"_index":442,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":496,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":89,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id.provider",{"_index":1433,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["id.provider.ts",{"_index":660,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"coverage.html":{}}}],["id.provider.ts:16",{"_index":664,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["id.provider.ts:7",{"_index":662,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{}}}],["identifier",{"_index":1478,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":465,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["idtoken",{"_index":762,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["image",{"_index":412,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"miscellaneous/enumerations.html":{}}}],["image/gif",{"_index":1308,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpeg",{"_index":1309,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/jpg",{"_index":1310,"title":{},"body":{"injectables/UploadsService.html":{}}}],["image/png'].includes",{"_index":1311,"title":{},"body":{"injectables/UploadsService.html":{}}}],["implements",{"_index":52,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["import",{"_index":38,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":797,"title":{},"body":{"modules/MailModule.html":{}}}],["imports",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["in')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["in(tags",{"_index":1206,"title":{},"body":{"injectables/TagsService.html":{}}}],["in.provider",{"_index":261,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["in.provider.ts",{"_index":1135,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["in.provider.ts:14",{"_index":1136,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["in.provider.ts:32",{"_index":1137,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["incoming",{"_index":526,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1562,"title":{},"body":{"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":624,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["inject",{"_index":39,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["inject(jwtconfig.key",{"_index":54,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["inject(request",{"_index":909,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":40,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":199,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":614,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":358,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":879,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":550,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":1201,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(upload",{"_index":1305,"title":{},"body":{"injectables/UploadsService.html":{}}}],["injectrepository(user",{"_index":361,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["inlinecssenabled",{"_index":815,"title":{},"body":{"modules/MailModule.html":{}}}],["insert",{"_index":987,"title":{},"body":{"entities/Post.html":{}}}],["installation",{"_index":1575,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1577,"title":{},"body":{"index.html":{}}}],["instance",{"_index":301,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/CreatePostDto.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["instance.canactivate(context",{"_index":322,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["intercept",{"_index":643,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["intercept(context",{"_index":646,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["interface",{"_index":79,"title":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{}},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"coverage.html":{}}}],["interfaces",{"_index":81,"title":{},"body":{"interfaces/ActiveUserData.html":{},"interfaces/GoogleUser.html":{},"interfaces/Paginated.html":{},"interfaces/UploadFile.html":{},"overview.html":{}}}],["interfaces/active",{"_index":690,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["interfaces/google",{"_index":359,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["interfaces/paginated.interface",{"_index":908,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["interfaces/upload",{"_index":1303,"title":{},"body":{"injectables/UploadsService.html":{}}}],["intersectiontype",{"_index":716,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isarray",{"_index":387,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isdate",{"_index":715,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["isemail",{"_index":601,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":471,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":494,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":491,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":1140,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["isglobal",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":472,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":473,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":474,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isn't",{"_index":1094,"title":{},"body":{"injectables/PostsService.html":{}}}],["isnotempty",{"_index":388,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isemail",{"_index":1131,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isemail()@maxlength(96",{"_index":582,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isjson",{"_index":533,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isnotempty()@isstring",{"_index":1122,"title":{},"body":{"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isstring()@minlength(3)@maxlength(96",{"_index":584,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@matches(/^(?=.*[a",{"_index":588,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["iso",{"_index":508,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":475,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@isdate",{"_index":712,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isoptional()@isjson",{"_index":444,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":935,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isoptional()@isstring()@minlength(3)@maxlength(96",{"_index":586,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ispositive",{"_index":938,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":476,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{}}}],["issuer",{"_index":694,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["isurl",{"_index":477,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["it's",{"_index":515,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":383,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["itemsperpage",{"_index":886,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["joi",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":793,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":812,"title":{},"body":{"modules/MailModule.html":{}}}],["joincolumn",{"_index":853,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":978,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":439,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["jwtconfig",{"_index":46,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtconfiguration",{"_index":18,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["jwtmodule",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtservice",{"_index":17,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["kamil",{"_index":1605,"title":{},"body":{"index.html":{}}}],["key",{"_index":1250,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["keyof",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["last",{"_index":891,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":365,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthenticationService.html":{},"interfaces/GoogleUser.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["later",{"_index":630,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":959,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["letter",{"_index":597,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":453,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["level",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["library",{"_index":751,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"dependencies.html":{}}}],["license",{"_index":1611,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1592,"title":{},"body":{"index.html":{}}}],["limit",{"_index":933,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linenumber",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["lines",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["links",{"_index":884,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":1347,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":885,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{}}}],["logging",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginticket",{"_index":760,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginticket.getpayload",{"_index":766,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["loginurl",{"_index":829,"title":{},"body":{"injectables/MailService.html":{}}}],["loop",{"_index":317,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["mail/mail.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule",{"_index":790,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forrootasync",{"_index":801,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":819,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":111,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":607,"title":{"injectables/MailService.html":{}},"body":{"injectables/CreateUserProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["manually",{"_index":800,"title":{},"body":{"modules/MailModule.html":{}}}],["many",{"_index":377,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many.provider",{"_index":1427,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1387,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":1391,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:18",{"_index":1393,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":979,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":972,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":980,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":952,"title":{},"body":{"entities/Post.html":{}}}],["map",{"_index":652,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["map((data",{"_index":655,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["match",{"_index":525,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":478,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":604,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":492,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":78,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":923,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maxlength",{"_index":479,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":499,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":493,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":488,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":602,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":451,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["meta_options",{"_index":855,"title":{},"body":{"entities/MetaOption.html":{}}}],["metadata",{"_index":299,"title":{},"body":{"guards/AuthenticationGuard.html":{},"dependencies.html":{}}}],["metaoption",{"_index":832,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":877,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptions",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":963,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":857,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":112,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsservice",{"_index":861,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":518,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":304,"title":{},"body":{"guards/AuthenticationGuard.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":1211,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["mind",{"_index":1120,"title":{},"body":{"injectables/PostsService.html":{}}}],["minlength",{"_index":480,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":580,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":487,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":603,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minumum",{"_index":593,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1544,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missingemail",{"_index":1511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["missingfirstname",{"_index":1512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["missingpassword",{"_index":1513,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1591,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1581,"title":{},"body":{"index.html":{}}}],["module",{"_index":98,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":100,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":792,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":796,"title":{},"body":{"modules/MailModule.html":{}}}],["moment",{"_index":628,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1602,"title":{},"body":{"index.html":{}}}],["moved",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["multipart/form",{"_index":1283,"title":{},"body":{"controllers/UploadsController.html":{}}}],["mysql",{"_index":986,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":1606,"title":{},"body":{"index.html":{}}}],["name",{"_index":24,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name.replace(/\\s/g",{"_index":1258,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["need",{"_index":799,"title":{},"body":{"modules/MailModule.html":{},"injectables/PostsService.html":{}}}],["needs",{"_index":942,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["neeeded",{"_index":1115,"title":{},"body":{"injectables/PostsService.html":{}}}],["nest",{"_index":1501,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["nestframework",{"_index":1610,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":651,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nestjs",{"_index":791,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":42,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":43,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":44,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":950,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1277,"title":{},"body":{"controllers/UploadsController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":394,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":65,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newtag",{"_index":1202,"title":{},"body":{"injectables/TagsService.html":{}}}],["newurl",{"_index":919,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":930,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":929,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":931,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":928,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":927,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":634,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["newusers",{"_index":1394,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1408,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":647,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["next.handle().pipe",{"_index":654,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["nextpage",{"_index":924,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1567,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["none",{"_index":1552,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["now",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["npm",{"_index":1576,"title":{},"body":{"index.html":{}}}],["null",{"_index":417,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/FindOneUserByEmailProvider.html":{}}}],["nullable",{"_index":842,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["number",{"_index":88,"title":{},"body":{"interfaces/ActiveUserData.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["oauth2client",{"_index":750,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauth2client(clientid",{"_index":758,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["oauthclient",{"_index":744,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["object",{"_index":419,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["objectliteral",{"_index":906,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["observable",{"_index":650,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["occurred",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["onboarding",{"_index":824,"title":{},"body":{"injectables/MailService.html":{}}}],["ondelete",{"_index":846,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":596,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["onetomany",{"_index":1332,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1329,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":854,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":844,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onmoduleinit",{"_index":745,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["open",{"_index":1593,"title":{},"body":{"index.html":{}}}],["operations",{"_index":990,"title":{},"body":{"entities/Post.html":{},"injectables/UsersService.html":{}}}],["operator",{"_index":1093,"title":{},"body":{"injectables/PostsService.html":{}}}],["option.entity",{"_index":871,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":834,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":840,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":843,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":838,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":850,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":848,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":26,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":530,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":870,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":858,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:14",{"_index":860,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":484,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":532,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":534,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["options.module.ts",{"_index":869,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":863,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":874,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:16",{"_index":878,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":876,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":483,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":873,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1615,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1515,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":426,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":882,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":900,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":903,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationmodule",{"_index":113,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":896,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":905,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":913,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":912,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":717,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":1025,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":1043,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1365,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":724,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":727,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":22,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parseintpipe",{"_index":1026,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":945,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":941,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":949,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["pass",{"_index":807,"title":{},"body":{"modules/MailModule.html":{}}}],["password",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password123",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwords",{"_index":1145,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["patch",{"_index":1027,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":939,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":1104,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":1108,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":1088,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":1098,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":1110,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.schema",{"_index":1106,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":1100,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":1102,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":1085,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":1091,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchuser",{"_index":1337,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1384,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1360,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":947,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["path",{"_index":794,"title":{},"body":{"modules/MailModule.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["path.extname(file.originalname",{"_index":1261,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["payload",{"_index":67,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["per",{"_index":1355,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":1440,"title":{},"body":{"injectables/UsersService.html":{}}}],["permanently",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":443,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":497,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":629,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["port",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["position",{"_index":1357,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":424,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":227,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"controllers/GoogleAuthenticationController.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post\"'})@minlength(4)@maxlength(256",{"_index":457,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":1002,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isnotempty()@isstring()@matches(/^[a",{"_index":448,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isnotempty()@isstring()@maxlength(512)@matches(/^[a",{"_index":578,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["post'})@isnotempty()@isstring()@minlength(4)@maxlength(512",{"_index":469,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":1339,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('file",{"_index":1287,"title":{},"body":{"controllers/UploadsController.html":{}}}],["post('refresh",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('sign",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@auth(authtype.none)@useinterceptors(classserializerinterceptor",{"_index":1342,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":1330,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":1103,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":546,"title":{},"body":{"injectables/CreatePostProvider.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:109",{"_index":437,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":944,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:118",{"_index":467,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:137",{"_index":422,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:31",{"_index":470,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":429,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":458,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":464,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:79",{"_index":445,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:89",{"_index":415,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":547,"title":{},"body":{"injectables/CreatePostProvider.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":1107,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":845,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.posttype",{"_index":1097,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.provider",{"_index":1060,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.provider.ts",{"_index":537,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["post.provider.ts:15",{"_index":540,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.provider.ts:32",{"_index":543,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["post.publishon",{"_index":1109,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":1105,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":1099,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":1101,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":1117,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":1090,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":1011,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":1077,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":1078,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":982,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1056,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":1037,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":709,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["posts.dto.ts:11",{"_index":714,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:16",{"_index":713,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts/posts.module",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":994,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":114,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":541,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["postsservice",{"_index":1030,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":459,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":984,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":983,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["previous",{"_index":892,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["previouspage",{"_index":925,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":839,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["private",{"_index":13,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":627,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1583,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1434,"title":{},"body":{"modules/UsersModule.html":{}}}],["progressive",{"_index":1566,"title":{},"body":{"index.html":{}}}],["project",{"_index":1594,"title":{},"body":{"index.html":{}}}],["promise",{"_index":32,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UploadToAwsProvider.html":{},"miscellaneous/functions.html":{}}}],["promise.all",{"_index":700,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["promise.resolve",{"_index":321,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["properties",{"_index":85,"title":{"properties.html":{}},"body":{"interfaces/ActiveUserData.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["provider",{"_index":615,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/UsersService.html":{}}}],["providers",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/bcrypt.provider",{"_index":259,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/create",{"_index":1059,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers/find",{"_index":1429,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/generate",{"_index":263,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/google",{"_index":737,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["providers/hashing.provider",{"_index":257,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/mail.service",{"_index":789,"title":{},"body":{"modules/MailModule.html":{}}}],["providers/meta",{"_index":862,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":898,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":1031,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/refresh",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/sign",{"_index":260,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":1176,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/upload",{"_index":1294,"title":{},"body":{"modules/UploadsModule.html":{}}}],["providers/uploads.service",{"_index":1280,"title":{},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{}}}],["providers/users",{"_index":1426,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1366,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":431,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isnotempty()@isenum(poststatus",{"_index":463,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":1028,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query'})@apiquery({name",{"_index":1352,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":1374,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1376,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":719,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":932,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":937,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":936,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":1396,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1411,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1399,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1405,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1407,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1421,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1414,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1402,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["r\\n",{"_index":495,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1601,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["reallly",{"_index":1112,"title":{},"body":{"injectables/PostsService.html":{}}}],["record",{"_index":294,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["reference",{"_index":1165,"title":{},"body":{"entities/Tag.html":{}}}],["reflect",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":287,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["refresh",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["refreshtoken",{"_index":699,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"classes/RefreshTokenDto.html":{}}}],["refreshtokendto",{"_index":213,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["refreshtokendto.refreshtoken",{"_index":1128,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokens(@body",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokens(refreshtokendto",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["refreshtokensprovider",{"_index":251,"title":{"injectables/RefreshTokensProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{},"overview.html":{}}}],["registered",{"_index":1348,"title":{},"body":{"controllers/UsersController.html":{}}}],["relations",{"_index":993,"title":{},"body":{"entities/Post.html":{}}}],["release",{"_index":1419,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["remove",{"_index":988,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["repository",{"_index":349,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UploadsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":922,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":910,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":1029,"title":{},"body":{"controllers/PostsController.html":{}}}],["request",{"_index":34,"title":{},"body":{"guards/AccessTokenGuard.html":{},"classes/CreatePostDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization?.split",{"_index":76,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["request[request_user_key",{"_index":71,"title":{},"body":{"guards/AccessTokenGuard.html":{},"miscellaneous/variables.html":{}}}],["request_user_key",{"_index":48,"title":{},"body":{"guards/AccessTokenGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requesttimeoutexception",{"_index":611,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":1403,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception(error",{"_index":640,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{}}}],["required",{"_index":382,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":1004,"title":{},"body":{"controllers/PostsController.html":{}}}],["response.interceptor",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["response.interceptor.ts",{"_index":642,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["response.interceptor.ts:11",{"_index":645,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response.interceptor.ts:19",{"_index":649,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["response/data",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["result",{"_index":1406,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":77,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":73,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1354,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":31,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["review",{"_index":462,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":1413,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["run",{"_index":1579,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1395,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["rxjs",{"_index":653,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["s3",{"_index":1240,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{}}}],["safest",{"_index":1118,"title":{},"body":{"injectables/PostsService.html":{}}}],["salt",{"_index":338,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["same",{"_index":618,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["save",{"_index":621,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{}}}],["saveduser",{"_index":370,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["scalable",{"_index":1571,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":461,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["sdk",{"_index":1242,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["secret",{"_index":696,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["secure",{"_index":804,"title":{},"body":{"modules/MailModule.html":{}}}],["send",{"_index":638,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["senduserwelcome",{"_index":817,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserwelcome(user",{"_index":821,"title":{},"body":{"injectables/MailService.html":{}}}],["sensitive",{"_index":625,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["sent",{"_index":529,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/SignInProvider.html":{},"injectables/UsersService.html":{}}}],["serialize",{"_index":438,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":490,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isnotempty()@isenum(posttype",{"_index":428,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1286,"title":{},"body":{"controllers/UploadsController.html":{},"index.html":{}}}],["server'})@post('file",{"_index":1272,"title":{},"body":{"controllers/UploadsController.html":{}}}],["serves",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata",{"_index":1364,"title":{},"body":{"controllers/UsersController.html":{}}}],["setmetadata(auth_type_key",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1160,"title":{},"body":{"entities/Tag.html":{}}}],["side",{"_index":1572,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":519,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sign",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signin(@body",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{}}}],["signindto",{"_index":220,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"coverage.html":{}}}],["signindto.password",{"_index":1143,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["signinprovider",{"_index":252,"title":{"injectables/SignInProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SignInProvider.html":{},"coverage.html":{},"overview.html":{}}}],["signtoken",{"_index":679,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["signtoken(userid",{"_index":683,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["single",{"_index":1454,"title":{},"body":{"injectables/UsersService.html":{}}}],["size",{"_index":1212,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["skip",{"_index":911,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["skipped",{"_index":1111,"title":{},"body":{"injectables/PostsService.html":{}}}],["slug",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":452,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["social/google",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{}}}],["social/providers/google",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["soft",{"_index":1162,"title":{},"body":{"entities/Tag.html":{}}}],["softdelete",{"_index":1168,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete(@query('id",{"_index":1182,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":1172,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":456,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spec.sample",{"_index":1508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["special",{"_index":598,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":725,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":1597,"title":{},"body":{"index.html":{}}}],["spread",{"_index":1092,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/.../active",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../app.create.ts",{"_index":1557,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../app.module.ts",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1546,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../auth.constants.ts",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.decorator.ts",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../file",{"_index":1548,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1558,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1550,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.create.ts",{"_index":1482,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":121,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":200,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":202,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1432,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/config/jwt.config",{"_index":47,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GoogleAuthenticationService.html":{}}}],["src/auth/constants/auth.constants",{"_index":49,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"controllers/PostsController.html":{}}}],["src/auth/constants/auth.constants.ts",{"_index":1488,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/active",{"_index":1039,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/auth.decorator",{"_index":1369,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/auth/decorators/auth.decorator.ts",{"_index":1490,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dtos/refresh",{"_index":1121,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts",{"_index":1130,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/signin.dto.ts:10",{"_index":1133,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/signin.dto.ts:6",{"_index":1132,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/enums/auth",{"_index":291,"title":{},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["src/auth/guards/access",{"_index":6,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts",{"_index":282,"title":{},"body":{"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:21",{"_index":288,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/guards/authentication/authentication.guard.ts:27",{"_index":289,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["src/auth/interfaces/active",{"_index":82,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreatePostProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:32",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:9",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/bcrypt.provider.ts",{"_index":325,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/bcrypt.provider.ts:15",{"_index":331,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/bcrypt.provider.ts:7",{"_index":334,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/auth/providers/generate",{"_index":676,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider",{"_index":612,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":780,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:5",{"_index":783,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:7",{"_index":782,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/refresh",{"_index":1124,"title":{},"body":{"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["src/auth/providers/sign",{"_index":1134,"title":{},"body":{"injectables/SignInProvider.html":{},"coverage.html":{}}}],["src/auth/social/dtos/google",{"_index":775,"title":{},"body":{"classes/GoogleTokenDto.html":{},"coverage.html":{}}}],["src/auth/social/google",{"_index":729,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{},"coverage.html":{}}}],["src/auth/social/providers/google",{"_index":742,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"coverage.html":{}}}],["src/common/interceptors/data",{"_index":641,"title":{},"body":{"injectables/DataResponseInterceptor.html":{},"coverage.html":{}}}],["src/common/pagination/dtos/pagination",{"_index":718,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":1074,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":883,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":1058,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":897,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":1073,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":899,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:10",{"_index":902,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:18",{"_index":904,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/mail/mail.module.ts",{"_index":787,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/providers/mail.service",{"_index":613,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["src/mail/providers/mail.service.ts",{"_index":816,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/providers/mail.service.ts:14",{"_index":822,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/providers/mail.service.ts:6",{"_index":820,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":1493,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":531,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":708,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":940,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":1554,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1555,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":851,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":951,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:19",{"_index":962,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":977,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:34",{"_index":965,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:42",{"_index":970,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:50",{"_index":971,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:56",{"_index":957,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:62",{"_index":968,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:69",{"_index":961,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:75",{"_index":967,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:82",{"_index":964,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:87",{"_index":955,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:93",{"_index":975,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":995,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":1013,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:49",{"_index":1006,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:65",{"_index":1018,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:70",{"_index":1009,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1055,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/create",{"_index":536,"title":{},"body":{"injectables/CreatePostProvider.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":1062,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:23",{"_index":1065,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:55",{"_index":1066,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:59",{"_index":1070,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:71",{"_index":1068,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:78",{"_index":1072,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":568,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":548,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":1191,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:15",{"_index":1196,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:20",{"_index":1199,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:30",{"_index":1197,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:39",{"_index":1200,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":1194,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":981,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":1147,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":1154,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":1155,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":1158,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":1152,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":1157,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":1153,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:53",{"_index":1149,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":1159,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:60",{"_index":1151,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:65",{"_index":1156,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":1167,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:16",{"_index":1170,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":1171,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:27",{"_index":1174,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":1057,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":1187,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/uploads/enums/file",{"_index":1553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/uploads/interfaces/upload",{"_index":1227,"title":{},"body":{"interfaces/UploadFile.html":{},"coverage.html":{}}}],["src/uploads/providers/upload",{"_index":1230,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts",{"_index":1298,"title":{},"body":{"injectables/UploadsService.html":{},"coverage.html":{}}}],["src/uploads/providers/uploads.service.ts:15",{"_index":1300,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/providers/uploads.service.ts:34",{"_index":1302,"title":{},"body":{"injectables/UploadsService.html":{}}}],["src/uploads/upload.entity.ts",{"_index":1210,"title":{},"body":{"entities/Upload.html":{},"coverage.html":{}}}],["src/uploads/upload.entity.ts:13",{"_index":1214,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:20",{"_index":1217,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:27",{"_index":1218,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:35",{"_index":1221,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:42",{"_index":1216,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:49",{"_index":1219,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:52",{"_index":1213,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/upload.entity.ts:55",{"_index":1222,"title":{},"body":{"entities/Upload.html":{}}}],["src/uploads/uploads.controller.ts",{"_index":1267,"title":{},"body":{"controllers/UploadsController.html":{},"coverage.html":{}}}],["src/uploads/uploads.controller.ts:30",{"_index":1273,"title":{},"body":{"controllers/UploadsController.html":{}}}],["src/uploads/uploads.module.ts",{"_index":1292,"title":{},"body":{"modules/UploadsModule.html":{}}}],["src/users/dtos/create",{"_index":376,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":723,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":948,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/google",{"_index":778,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["src/users/providers/create",{"_index":344,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":659,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1386,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":1438,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:112",{"_index":1446,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:116",{"_index":1450,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:120",{"_index":1451,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:124",{"_index":1445,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":1444,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:61",{"_index":1447,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:68",{"_index":1449,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:92",{"_index":1453,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":689,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{},"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":1320,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:16",{"_index":1323,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":1327,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":1322,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:39",{"_index":1328,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":1325,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:49",{"_index":1331,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":1326,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1334,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:54",{"_index":1359,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":1343,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1340,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":1361,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1425,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1400,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1582,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1584,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":711,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{}}}],["started",{"_index":1565,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1574,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1479,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":284,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["status",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":1603,"title":{},"body":{"index.html":{}}}],["story",{"_index":427,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["strict",{"_index":506,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/MailModule.html":{}}}],["strictseparator",{"_index":435,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string",{"_index":36,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"injectables/AppService.html":{},"injectables/BcryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":1417,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["sub",{"_index":87,"title":{},"body":{"interfaces/ActiveUserData.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["subject",{"_index":826,"title":{},"body":{"injectables/MailService.html":{}}}],["succesfully",{"_index":1351,"title":{},"body":{"controllers/UsersController.html":{}}}],["successful",{"_index":1409,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":1046,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@patch",{"_index":1017,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":1005,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":1045,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1307,"title":{},"body":{"injectables/UploadsService.html":{},"index.html":{},"modules.html":{}}}],["supported",{"_index":1313,"title":{},"body":{"injectables/UploadsService.html":{}}}],["sure",{"_index":1113,"title":{},"body":{"injectables/PostsService.html":{}}}],["svg",{"_index":1613,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":685,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1439,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":562,"title":{"entities/Tag.html":{}},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag.dto",{"_index":1175,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":569,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:19",{"_index":575,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:32",{"_index":579,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:37",{"_index":571,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:42",{"_index":577,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:48",{"_index":573,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":1189,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":973,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":1188,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":559,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["tags/soft",{"_index":1181,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":1166,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":115,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":1195,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":539,"title":{"injectables/TagsService.html":{}},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":914,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["team",{"_index":825,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":810,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["templates",{"_index":813,"title":{},"body":{"modules/MailModule.html":{}}}],["test",{"_index":1587,"title":{},"body":{"index.html":{}}}],["test/.../bootstrap",{"_index":1559,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../drop",{"_index":1560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test/.../users.post.e2e",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/helpers/bootstrap",{"_index":1500,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/helpers/drop",{"_index":1504,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["test/users/users.post.e2e",{"_index":1507,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":1590,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1589,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1586,"title":{},"body":{"index.html":{}}}],["text",{"_index":956,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1596,"title":{},"body":{"index.html":{}}}],["this.accesstokenguard",{"_index":295,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.authservice.refreshtokens(refreshtokendto",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(signindto",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authtypeguardmap[type]).flat",{"_index":315,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.configservice.get('appconfig.apiversion",{"_index":657,"title":{},"body":{"injectables/DataResponseInterceptor.html":{}}}],["this.configservice.get('appconfig.awsbucketname",{"_index":1248,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.creategoogleuserprovider.creategoogleuser(googleuser",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.createpostprovider.create(createpostdto",{"_index":1075,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createuserprovider.createuser(createuserdto",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1397,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.extractrequestfromheader(request",{"_index":62,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.findonebygoogleidprovider.findonebygoogleid(googleid",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findoneuserbyemail.findonebyemail(email",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generatefilename(file",{"_index":1251,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["this.generatetokensprovider.generatetokens(newuser",{"_index":771,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.generatetokensprovider.generatetokens(user",{"_index":769,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["this.googleauthenticationservice.authenticate(googletokendto",{"_index":741,"title":{},"body":{"controllers/GoogleAuthenticationController.html":{}}}],["this.hashingprovider.comparepasswords",{"_index":1142,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.hashingprovider.hashpassword(createuserdto.password",{"_index":635,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.jwtconfiguration",{"_index":70,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["this.jwtconfiguration.accesstokenttl",{"_index":703,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.audience",{"_index":693,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.googleclientid",{"_index":754,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.googleclientsecret",{"_index":756,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.jwtconfiguration.issuer",{"_index":695,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtconfiguration.refreshtokenttl",{"_index":706,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtconfiguration.secret",{"_index":697,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.jwtservice.signasync",{"_index":691,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.jwtservice.verifyasync",{"_index":69,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/RefreshTokensProvider.html":{}}}],["this.mailerservice.sendmail",{"_index":823,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserwelcome(newuser",{"_index":639,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.metaoptionrepository.create",{"_index":880,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":881,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":866,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.oauthclient",{"_index":757,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.oauthclient.verifyidtoken",{"_index":761,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.paginationprovider.paginatequery",{"_index":1076,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository",{"_index":1079,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":563,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.postsrepository.delete(id",{"_index":1080,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":1087,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":564,"title":{},"body":{"injectables/CreatePostProvider.html":{},"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":1047,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":1051,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(postquery",{"_index":1044,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":1049,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.reflector.getallandoverride(auth_type_key",{"_index":307,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["this.refreshtokensprovider.refreshtokens(refreshtokendto",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.headers.host",{"_index":918,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":917,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.signinprovider.signin(signindto",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":701,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.signtoken(user.id",{"_index":705,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":1203,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":1207,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":1205,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(newtag",{"_index":1204,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":1208,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":1178,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.delete(id",{"_index":1180,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":557,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":1083,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softdelete(id",{"_index":1183,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.uploadsrepository.create(uploadfile",{"_index":1318,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsrepository.save(upload",{"_index":1319,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.uploadsservice.uploadfile(file",{"_index":1289,"title":{},"body":{"controllers/UploadsController.html":{}}}],["this.uploadtoawsprovider.fileupload(file",{"_index":1314,"title":{},"body":{"injectables/UploadsService.html":{}}}],["this.userscreatemanyprovider.createmany(createmanyusersdto",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":362,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findone",{"_index":619,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.findoneby",{"_index":665,"title":{},"body":{"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":636,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["this.usersrepository.save(user",{"_index":371,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["this.usersservice.creategoogleuser",{"_index":770,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.createmany(createmanyusers",{"_index":1383,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1381,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":1378,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyemail(signindto.email",{"_index":1138,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["this.usersservice.findonebygoogleid(googleid",{"_index":768,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["this.usersservice.findonebyid(sub",{"_index":1129,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["this.usersservice.findonebyid(user.sub",{"_index":556,"title":{},"body":{"injectables/CreatePostProvider.html":{}}}],["through",{"_index":318,"title":{},"body":{"guards/AuthenticationGuard.html":{}}}],["throw",{"_index":64,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":441,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["timestamp",{"_index":966,"title":{},"body":{"entities/Post.html":{},"injectables/UploadToAwsProvider.html":{}}}],["timezone",{"_index":502,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":60,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"controllers/UploadsController.html":{}}}],["token.dto",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["token.dto.ts",{"_index":776,"title":{},"body":{"classes/GoogleTokenDto.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":777,"title":{},"body":{"classes/GoogleTokenDto.html":{}}}],["token.dto.ts:6",{"_index":1123,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["token.guard",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{}}}],["token.guard.ts",{"_index":8,"title":{},"body":{"guards/AccessTokenGuard.html":{},"coverage.html":{}}}],["token.guard.ts:16",{"_index":21,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:30",{"_index":29,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token.guard.ts:55",{"_index":35,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["token/access",{"_index":7,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"coverage.html":{}}}],["tokens",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens')@httpcode(httpstatus.ok)@auth(authtype.none",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["tokens.provider",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["tokens.provider.ts",{"_index":677,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/RefreshTokensProvider.html":{},"coverage.html":{}}}],["tokens.provider.ts:16",{"_index":1125,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:23",{"_index":686,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:38",{"_index":682,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["tokens.provider.ts:40",{"_index":1126,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["tokens.provider.ts:9",{"_index":680,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["totalitems",{"_index":887,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":889,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1604,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1401,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transform",{"_index":485,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["transformer",{"_index":392,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":802,"title":{},"body":{"modules/MailModule.html":{}}}],["trim",{"_index":1259,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["true",{"_index":74,"title":{},"body":{"guards/AccessTokenGuard.html":{},"modules/AppModule.html":{},"guards/AuthenticationGuard.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"modules/MailModule.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":1324,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":974,"title":{},"body":{"entities/Post.html":{}}}],["true})@transform",{"_index":436,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":385,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":66,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1609,"title":{},"body":{"index.html":{}}}],["two",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":25,"title":{},"body":{"guards/AccessTokenGuard.html":{},"interfaces/ActiveUserData.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/AuthenticationGuard.html":{},"injectables/BcryptProvider.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/CreatePostProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/CreateUserProvider.html":{},"injectables/DataResponseInterceptor.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/GoogleAuthenticationController.html":{},"injectables/GoogleAuthenticationService.html":{},"classes/GoogleTokenDto.html":{},"interfaces/GoogleUser.html":{},"injectables/HashingProvider.html":{},"injectables/MailService.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/RefreshTokenDto.html":{},"injectables/RefreshTokensProvider.html":{},"classes/SignInDto.html":{},"injectables/SignInProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"guards/AuthenticationGuard.html":{},"controllers/GoogleAuthenticationController.html":{},"controllers/UsersController.html":{}}}],["type.enum.ts",{"_index":1547,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":511,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["typeorm",{"_index":356,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/Upload.html":{},"injectables/UploadsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":872,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1061,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":1190,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([upload",{"_index":1297,"title":{},"body":{"modules/UploadsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1436,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":313,"title":{},"body":{"guards/AuthenticationGuard.html":{},"classes/PatchUserDto.html":{},"injectables/UploadsService.html":{},"dependencies.html":{}}}],["types.enum",{"_index":1224,"title":{},"body":{"entities/Upload.html":{},"interfaces/UploadFile.html":{},"injectables/UploadsService.html":{}}}],["types.enum.ts",{"_index":1549,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["types/multer",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1021,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["unable",{"_index":626,"title":{},"body":{"injectables/CreateUserProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unauthorised",{"_index":772,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["unauthorizedexception",{"_index":41,"title":{},"body":{"guards/AccessTokenGuard.html":{},"guards/AuthenticationGuard.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{}}}],["unauthorizedexception('incorrect",{"_index":1146,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["unauthorizedexception('user",{"_index":674,"title":{},"body":{"injectables/FindOneUserByEmailProvider.html":{}}}],["unauthorizedexception(error",{"_index":774,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["undefined",{"_index":37,"title":{},"body":{"guards/AccessTokenGuard.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Upload.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["undefined'])@apioperation({summary",{"_index":1271,"title":{},"body":{"controllers/UploadsController.html":{}}}],["undefined})@isnotempty()@isarray()@validatenested({each",{"_index":384,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":466,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":421,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":565,"title":{},"body":{"injectables/CreatePostProvider.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1585,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateGoogleUserProvider.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UploadToAwsProvider.html":{},"injectables/UploadsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1623,"title":{},"body":{"properties.html":{}}}],["unsuccessful",{"_index":1412,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["unsupported",{"_index":1306,"title":{},"body":{"injectables/UploadsService.html":{}}}],["unused",{"_index":1023,"title":{},"body":{"controllers/PostsController.html":{}}}],["update",{"_index":1064,"title":{},"body":{"injectables/PostsService.html":{}}}],["update(patchpostdto",{"_index":1071,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":946,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updated'})@isint()@isnotempty",{"_index":943,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedate",{"_index":836,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatedatecolumn",{"_index":849,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/Upload.html":{}}}],["updatepost",{"_index":999,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":1048,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":1014,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1015,"title":{},"body":{"controllers/PostsController.html":{}}}],["upload",{"_index":1209,"title":{"entities/Upload.html":{}},"body":{"entities/Upload.html":{},"injectables/UploadToAwsProvider.html":{},"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["upload.entity",{"_index":1296,"title":{},"body":{"modules/UploadsModule.html":{},"injectables/UploadsService.html":{}}}],["uploadedfile",{"_index":1274,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile",{"_index":1226,"title":{"interfaces/UploadFile.html":{}},"body":{"interfaces/UploadFile.html":{},"controllers/UploadsController.html":{},"injectables/UploadsService.html":{},"coverage.html":{}}}],["uploadfile(@uploadedfile",{"_index":1288,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploadfile(file",{"_index":1269,"title":{},"body":{"controllers/UploadsController.html":{},"injectables/UploadsService.html":{}}}],["uploadresult",{"_index":1246,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploadresult.key",{"_index":1254,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uploads",{"_index":1268,"title":{},"body":{"controllers/UploadsController.html":{}}}],["uploads.controller",{"_index":1293,"title":{},"body":{"modules/UploadsModule.html":{}}}],["uploads/uploads.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["uploadscontroller",{"_index":1266,"title":{"controllers/UploadsController.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"coverage.html":{}}}],["uploadsmodule",{"_index":116,"title":{"modules/UploadsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UploadsModule.html":{},"modules.html":{},"overview.html":{}}}],["uploadsrepository",{"_index":1301,"title":{},"body":{"injectables/UploadsService.html":{}}}],["uploadsservice",{"_index":1279,"title":{"injectables/UploadsService.html":{}},"body":{"controllers/UploadsController.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["uploadtoawsprovider",{"_index":1229,"title":{"injectables/UploadToAwsProvider.html":{}},"body":{"injectables/UploadToAwsProvider.html":{},"modules/UploadsModule.html":{},"injectables/UploadsService.html":{},"coverage.html":{},"overview.html":{}}}],["url",{"_index":447,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url(this.request.url",{"_index":920,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["urls",{"_index":915,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["useclass",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefactory",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["useinterceptors",{"_index":1275,"title":{},"body":{"controllers/UploadsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":1379,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1282,"title":{},"body":{"controllers/UploadsController.html":{}}}],["useinterceptors(undefined)@apiheaders(['undefined",{"_index":1270,"title":{},"body":{"controllers/UploadsController.html":{}}}],["user",{"_index":83,"title":{"entities/User.html":{}},"body":{"interfaces/ActiveUserData.html":{},"injectables/CreateGoogleUserProvider.html":{},"classes/CreateManyUsersDto.html":{},"injectables/CreatePostProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/GenerateTokensProvider.html":{},"classes/GetUsersParamDto.html":{},"injectables/GoogleAuthenticationService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":1040,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.decorator.ts",{"_index":1489,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":391,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/CreateUserProvider.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":581,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":585,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":587,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":583,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":600,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":704,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"injectables/MailService.html":{}}}],["user.entity",{"_index":357,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":828,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":702,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["user.interface",{"_index":360,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/UsersService.html":{}}}],["user.interface.ts",{"_index":779,"title":{},"body":{"interfaces/GoogleUser.html":{},"coverage.html":{}}}],["user.password",{"_index":1144,"title":{},"body":{"injectables/SignInProvider.html":{}}}],["user.posts",{"_index":953,"title":{},"body":{"entities/Post.html":{}}}],["user.provider",{"_index":1428,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.provider.ts",{"_index":346,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"coverage.html":{}}}],["user.provider.ts:16",{"_index":608,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:17",{"_index":354,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user.provider.ts:36",{"_index":610,"title":{},"body":{"injectables/CreateUserProvider.html":{}}}],["user.provider.ts:8",{"_index":350,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{}}}],["user?.[field",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":687,"title":{},"body":{"injectables/GenerateTokensProvider.html":{},"controllers/PostsController.html":{}}}],["username",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":379,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":1431,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":1368,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":378,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:18",{"_index":386,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.service.ts",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["userscontroller",{"_index":305,"title":{"controllers/UsersController.html":{}},"body":{"guards/AuthenticationGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1385,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice",{"_index":752,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{}}}],["usersmodule",{"_index":117,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":351,"title":{},"body":{"injectables/CreateGoogleUserProvider.html":{},"injectables/CreateUserProvider.html":{},"injectables/FindOneByGoogleIdProvider.html":{},"injectables/FindOneUserByEmailProvider.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":272,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CreatePostProvider.html":{},"injectables/GoogleAuthenticationService.html":{},"injectables/PostsService.html":{},"injectables/RefreshTokensProvider.html":{},"injectables/SignInProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":454,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":767,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{}}}],["uuid",{"_index":1245,"title":{},"body":{"injectables/UploadToAwsProvider.html":{},"dependencies.html":{}}}],["uuid4",{"_index":1244,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["uuid4()}${extension",{"_index":1265,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["v4",{"_index":1243,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["vaildity",{"_index":1127,"title":{},"body":{"injectables/RefreshTokensProvider.html":{}}}],["validate",{"_index":63,"title":{},"body":{"guards/AccessTokenGuard.html":{}}}],["validated",{"_index":521,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":389,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validates",{"_index":507,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":440,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":390,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetPostsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/GoogleTokenDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/RefreshTokenDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":510,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring().slice(0",{"_index":512,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values",{"_index":425,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":958,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/Upload.html":{},"entities/User.html":{}}}],["variable",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1624,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":1024,"title":{},"body":{"controllers/PostsController.html":{}}}],["verify",{"_index":759,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/RefreshTokensProvider.html":{}}}],["version",{"_index":1621,"title":{},"body":{"properties.html":{}}}],["void",{"_index":749,"title":{},"body":{"injectables/GoogleAuthenticationService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["want",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":1580,"title":{},"body":{"index.html":{}}}],["website",{"_index":1607,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":827,"title":{},"body":{"injectables/MailService.html":{}}}],["whitespaces",{"_index":1257,"title":{},"body":{"injectables/UploadToAwsProvider.html":{}}}],["without",{"_index":455,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"modules/MailModule.html":{}}}],["working",{"_index":1095,"title":{},"body":{"injectables/PostsService.html":{}}}],["world",{"_index":204,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":688,"title":{},"body":{"injectables/GenerateTokensProvider.html":{}}}],["you'd",{"_index":1600,"title":{},"body":{"index.html":{}}}],["z0",{"_index":449,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":592,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":590,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":591,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UploadsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AccessTokenGuard.html":{"url":"guards/AccessTokenGuard.html","title":"guard - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/access-token/access-token.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                extractRequestFromHeader\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/access-token/access-token.guard.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractRequestFromHeader\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractRequestFromHeader(request: Request)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/access-token/access-token.guard.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    // Extract the request from the execution context\n    const request: Request = context.switchToHttp().getRequest();\n\n    // Etract the token from the header\n    const token = this.extractRequestFromHeader(request);\n\n    // Validate the token\n    if (!token) {\n      throw new UnauthorizedException();\n    }\n\n    try {\n      const payload = await this.jwtService.verifyAsync(\n        token,\n        this.jwtConfiguration,\n      );\n      request[REQUEST_USER_KEY] = payload;\n    } catch {\n      throw new UnauthorizedException();\n    }\n\n    return true;\n  }\n\n  private extractRequestFromHeader(request: Request): string | undefined {\n    const [_, token] = request.headers.authorization?.split(' ') ?? [];\n\n    return token;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ActiveUserData.html":{"url":"interfaces/ActiveUserData.html","title":"interface - ActiveUserData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActiveUserData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/active-user-data.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ActiveUserData {\n  // ID of the current user\n  sub: number;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UploadsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport jwtConfig from './auth/config/jwt.config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nimport { UsersModule } from 'src/users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\nimport { AppService } from './app.service';\n\nimport { AppController } from './app.controller';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AccessTokenGuard } from './auth/guards/access-token/access-token.guard';\nimport { AuthenticationGuard } from './auth/guards/authentication/authentication.guard';\nimport { DataResponseInterceptor } from './common/interceptors/data-response/data-response.interceptor';\nimport { UploadsModule } from './uploads/uploads.module';\nimport { MailModule } from './mail/mail.module';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true, // config module is now available to all modules\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        host: configService.get('database.host'),\n        port: configService.get('database.port'),\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    // this two lines are a must if we want to use guard at this module\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n    UploadsModule,\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_GUARD, // apply guards to a module-level, but globally\n      useClass: AuthenticationGuard, // default app guard\n    },\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: DataResponseInterceptor,\n    },\n    AccessTokenGuard, // dependency of the AuthenticationGuard\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh-tokens')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('sign-in')@HttpCode(HttpStatus.OK)@Auth(AuthType.None)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, HttpCode, HttpStatus, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/signin.dto';\nimport { Auth } from './decorators/auth.decorator';\nimport { AuthType } from './enums/auth-type.enum';\nimport { RefreshTokenDto } from './dtos/refresh-token.dto';\n\n@Controller('auth')\nexport class AuthController {\n  /**\n   * Inject AuthService\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('sign-in')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public async signIn(@Body() signInDto: SignInDto) {\n    return this.authService.signIn(signInDto);\n  }\n\n  @Post('refresh-tokens')\n  @HttpCode(HttpStatus.OK)\n  @Auth(AuthType.None)\n  public async refreshTokens(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GenerateTokensProvider\n                        \n                        \n                            GoogleAuthenticationService\n                        \n                        \n                            RefreshTokensProvider\n                        \n                        \n                            SignInProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            GoogleAuthenticationController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\nimport { SignInProvider } from './providers/sign-in.provider';\nimport { ConfigModule } from '@nestjs/config';\nimport jwtConfig from './config/jwt.config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { GenerateTokensProvider } from './providers/generate-tokens.provider';\nimport { RefreshTokensProvider } from './providers/refresh-tokens.provider';\nimport { GoogleAuthenticationController } from './social/google-authentication.controller';\nimport { GoogleAuthenticationService } from './social/providers/google-authentication.service';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    ConfigModule.forFeature(jwtConfig),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n  ],\n  controllers: [AuthController, GoogleAuthenticationController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider,\n      useClass: BcryptProvider,\n    },\n    SignInProvider,\n    GenerateTokensProvider,\n    RefreshTokensProvider,\n    GoogleAuthenticationService,\n  ],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, signInProvider: SignInProvider, refreshTokensProvider: RefreshTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        signInProvider\n                                                  \n                                                        \n                                                                        SignInProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokensProvider\n                                                  \n                                                        \n                                                                        RefreshTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { SignInProvider } from './sign-in.provider';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { RefreshTokensProvider } from './refresh-tokens.provider';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject signInProvider\n     */\n    private readonly signInProvider: SignInProvider,\n\n    /**\n     * Inject refreshTokensProvider\n     */\n    private readonly refreshTokensProvider: RefreshTokensProvider,\n  ) {}\n\n  public async signIn(signInDto: SignInDto) {\n    return await this.signInProvider.signIn(signInDto);\n  }\n\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    return await this.refreshTokensProvider.refreshTokens(refreshTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthenticationGuard.html":{"url":"guards/AuthenticationGuard.html","title":"guard - AuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/authentication/authentication.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authTypeGuardMap\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                defaultAuthType\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, accessTokenGuard: AccessTokenGuard)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/authentication/authentication.guard.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        accessTokenGuard\n                                                  \n                                                        \n                                                                        AccessTokenGuard\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/authentication/authentication.guard.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AccessTokenGuard } from '../access-token/access-token.guard';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\nimport { AUTH_TYPE_KEY } from 'src/auth/constants/auth.constants';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  private static readonly defaultAuthType = AuthType.Bearer;\n  private readonly authTypeGuardMap: Record = {\n    [AuthType.Bearer]: this.accessTokenGuard,\n    [AuthType.None]: { canActivate: () => true },\n  };\n\n  constructor(\n    private readonly reflector: Reflector,\n    private readonly accessTokenGuard: AccessTokenGuard,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    // Get all authTypes assigned as metadata to our controller endpoints from the Reflector class instance\n    // for example in the createUsers method in the UsersController that metadata comes with @Auth(AuthType.None)\n    const authTypes = this.reflector.getAllAndOverride(AUTH_TYPE_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]) ?? [AuthenticationGuard.defaultAuthType];\n\n    // Create an array of all guard types\n    const guards = authTypes.map((type) => this.authTypeGuardMap[type]).flat();\n\n    // Default error\n    const error = new UnauthorizedException();\n\n    // Loop through guards and fire the canActivate method on each instance\n    for (const instance of guards) {\n      const canActivate = await Promise.resolve(\n        instance.canActivate(context),\n      ).catch((err) => {\n        error: err;\n      });\n      if (canActivate) {\n        return true;\n      }\n    }\n\n    throw error;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/bcrypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                comparePasswords\n                            \n                            \n                                    Public\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/bcrypt.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  public async hashPassword(data: string | Buffer): Promise {\n    // Generate a salt\n    const salt = await bcrypt.genSalt();\n\n    // Hash the password\n    return bcrypt.hash(data, salt);\n  }\n\n  public comparePasswords(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateGoogleUserProvider.html":{"url":"injectables/CreateGoogleUserProvider.html","title":"injectable - CreateGoogleUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateGoogleUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-google-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-google-user.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-google-user.provider.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n@Injectable()\nexport class CreateGoogleUserProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    try {\n      const user = this.usersRepository.create({\n        firstName: googleUser.firstName,\n        lastName: googleUser.lastName,\n        googleId: googleUser.googleId,\n        email: googleUser.email,\n      });\n      const savedUser = await this.usersRepository.save(user);\n      return savedUser;\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Could not create a new user',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@IsNotEmpty()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @IsNotEmpty()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto)\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blog post', example: 'http://gravatar.com/profile/29292929/images/image1.jpg'})@IsOptional()@IsUrl()@MinLength(4)@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:137\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsNotEmpty()@IsEnum(PostType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-07-30T07:46:32'})@IsOptional()@IsString()@IsISO8601({strict: true, strictSeparator: true})@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:109\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{ \n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsNotEmpty()@IsString()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-post\"'})@MinLength(4)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostStatus, description: 'Possible values, 'draft', 'scheduled', 'review', 'published''})@IsNotEmpty()@IsEnum(PostStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsNotEmpty()@IsString()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { PostStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { Transform, Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(4)\n  @MaxLength(512)\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsNotEmpty()\n  @IsEnum(PostType)\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-post\"',\n  })\n  @MinLength(4)\n  @MaxLength(256)\n  slug: string;\n\n  @ApiProperty({\n    enum: PostStatus,\n    description: \"Possible values, 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsNotEmpty()\n  @IsEnum(PostStatus)\n  status: PostStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{ \\r\\n \"@context\": \"https://schema.org\",\\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blog post',\n    example: 'http://gravatar.com/profile/29292929/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MinLength(4)\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  // @ApiPropertyOptional({\n  //   description: 'The date on which the blog post is published',\n  //   example: '2024-07-30T07:46:32+0000',\n  // })\n  // @IsOptional()\n  // @IsISO8601()\n  // publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-07-30T07:46:32', // No timezone\n  })\n  @IsOptional()\n  @IsString() // Use IsString to avoid automatic date conversion\n  @IsISO8601({ strict: true, strictSeparator: true }) // Validates strict ISO format without timezone\n  @Transform(({ value }) =>\n    typeof value === 'string' ? value : value.toISOString().slice(0, 19),\n  ) // Ensure it's a string\n  publishOn?: string;\n\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true }) // each value in the array must be a string\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{ \"sidebarEnabled\" : true }',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true }) // all the properties of the CratePostMetaOptionsDto are validated against that created instance of CreaatePostMetaOptionsDto\n  @Type(() => CreatePostMetaOptionsDto) // match the incoming request and creates an instance of CreatePostMetaOptionsDto\n  metaOptions?: CreatePostMetaOptionsDto | null; // expect null to be sent for options since they are not required\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreatePostProvider.html":{"url":"injectables/CreatePostProvider.html","title":"injectable - CreatePostProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreatePostProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/create-post.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, tagsService: TagsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/create-post.provider.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/create-post.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class CreatePostProvider {\n  constructor(\n    /**\n     * Inject postsRepository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n    /**\n     * Inject UsersService\n     */\n    private readonly usersService: UsersService,\n  ) {}\n\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    let author = undefined;\n    let tags = undefined;\n\n    try {\n      // Find author from the db, based on authorId\n      author = await this.usersService.findOneById(user.sub);\n\n      // Find tags\n      tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n\n    if (createPostDto.tags.length !== tags.length) {\n      throw new BadRequestException('Please check your tag ids');\n    }\n\n    // Create Post\n    const post = this.postsRepository.create({\n      ...createPostDto,\n      author,\n      tags,\n    });\n\n    try {\n      // Return the Post to the user\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new ConflictException(error, {\n        description: 'Ensure post slug is unique and not a duplicate',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsNotEmpty()@IsString()@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-post\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: \"For example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(512)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-post\"',\n  })\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@Matches(/^(?=.*[A-Aa-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minumum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsOptional()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(96)\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Aa-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minumum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateUserProvider.html":{"url":"injectables/CreateUserProvider.html","title":"injectable - CreateUserProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateUserProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/create-user.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, hashingProvider: HashingProvider, mailService: MailService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/create-user.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/create-user.provider.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  forwardRef,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\nimport { MailService } from 'src/mail/providers/mail.service';\n\n@Injectable()\nexport class CreateUserProvider {\n  constructor(\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n\n    /**\n     * Inject BCrypt Provider\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * Inject mailService\n     */\n    private readonly mailService: MailService,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Check is user exists with same email\n      existingUser = await this.usersRepository.findOne({\n        where: { email: createUserDto.email },\n      });\n    } catch (error) {\n      // Might save the details of the exception\n      // Information which is sensitive\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the database',\n        },\n      );\n    }\n\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, please check your email.',\n      );\n    }\n\n    // Create a new user\n    let newUser = this.usersRepository.create({\n      ...createUserDto,\n      password: await this.hashingProvider.hashPassword(createUserDto.password),\n    });\n\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error connecting to the the datbase',\n        },\n      );\n    }\n\n    // Send email\n    try {\n      await this.mailService.sendUserWelcome(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataResponseInterceptor.html":{"url":"injectables/DataResponseInterceptor.html","title":"injectable - DataResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interceptors/data-response/data-response.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/common/interceptors/data-response/data-response.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/interceptors/data-response/data-response.interceptor.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Observable, map } from 'rxjs';\n\n@Injectable()\nexport class DataResponseInterceptor implements NestInterceptor {\n  constructor(\n    /**\n     * Inject the configService\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(\n      map((data) => ({\n        apiVersion: this.configService.get('appConfig.apiVersion'),\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneByGoogleIdProvider.html":{"url":"injectables/FindOneByGoogleIdProvider.html","title":"injectable - FindOneByGoogleIdProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneByGoogleIdProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-by-google-id.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-by-google-id.provider.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-by-google-id.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindOneByGoogleIdProvider {\n  constructor(\n    /**\n     * Inject usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.usersRepository.findOneBy({ googleId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindOneUserByEmailProvider.html":{"url":"injectables/FindOneUserByEmailProvider.html","title":"injectable - FindOneUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindOneUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-one-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-one-user-by-email.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-one-user-by-email.provider.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class FindOneUserByEmailProvider {\n  constructor(\n    /**\n     * Inject UsersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n  ) {}\n\n  public async findOneByEmail(email: string) {\n    let user: User | undefined = undefined;\n\n    try {\n      // null if user is not found\n      user = await this.usersRepository.findOneBy({ email: email });\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not fetch the user',\n      });\n    }\n\n    if (!user) {\n      throw new UnauthorizedException('User does not exist');\n    }\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GenerateTokensProvider.html":{"url":"injectables/GenerateTokensProvider.html","title":"injectable - GenerateTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GenerateTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/generate-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                generateTokens\n                            \n                            \n                                    Public\n                                    Async\n                                signToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/generate-tokens.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        generateTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateTokens(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    signToken(userId: number, expiresIn: number, payload?: T)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/generate-tokens.provider.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresIn\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport jwtConfig from '../config/jwt.config';\nimport { ConfigType } from '@nestjs/config';\nimport { User } from 'src/users/user.entity';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class GenerateTokensProvider {\n  constructor(\n    /**\n     * Inject JwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n  ) {}\n\n  public async signToken(userId: number, expiresIn: number, payload?: T) {\n    return await this.jwtService.signAsync(\n      {\n        sub: userId,\n        ...payload,\n      },\n      {\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n        secret: this.jwtConfiguration.secret,\n        expiresIn: expiresIn,\n      },\n    );\n  }\n\n  public async generateTokens(user: User) {\n    const [accessToken, refreshToken] = await Promise.all([\n      // Generate the access token\n      this.signToken>(\n        user.id,\n        this.jwtConfiguration.accessTokenTtl,\n        {\n          email: user.email,\n        },\n      ),\n      // Generate the refresh token\n      this.signToken(user.id, this.jwtConfiguration.refreshTokenTtl),\n    ]);\n\n    return {\n      accessToken,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-posts.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n// import { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  // @Type(() => Date)\n  startDate?: Date;\n\n  @IsOptional()\n  @IsDate()\n  // @Type(() => Date)\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsDto.html":{"url":"classes/GetPostsDto.html","title":"class - GetPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsOptional } from 'class-validator';\nimport { IntersectionType } from '@nestjs/swagger';\n\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/pagination-query.dto';\n// import { Type } from 'class-transformer';\n\nclass GetPostsBaseDto {\n  @IsOptional()\n  @IsDate()\n  // @Type(() => Date)\n  startDate?: Date;\n\n  @IsOptional()\n  @IsDate()\n  // @Type(() => Date)\n  endDate?: Date;\n}\n\nexport class GetPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GoogleAuthenticationController.html":{"url":"controllers/GoogleAuthenticationController.html","title":"controller - GoogleAuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GoogleAuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/google-authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth/google-authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authenticate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/social/google-authentication.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { GoogleAuthenticationService } from './providers/google-authentication.service';\nimport { Body, Controller, Post } from '@nestjs/common';\nimport { GoogleTokenDto } from './dtos/google-token.dto';\nimport { Auth } from '../decorators/auth.decorator';\nimport { AuthType } from '../enums/auth-type.enum';\n\n@Auth(AuthType.None)\n@Controller('auth/google-authentication')\nexport class GoogleAuthenticationController {\n  constructor(\n    /**\n     * Inject googleAuthenticationService\n     */\n    private readonly googleAuthenticationService: GoogleAuthenticationService,\n  ) {}\n\n  @Post()\n  authenticate(@Body() googleTokenDto: GoogleTokenDto) {\n    return this.googleAuthenticationService.authenticate(googleTokenDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthenticationService.html":{"url":"injectables/GoogleAuthenticationService.html","title":"injectable - GoogleAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/providers/google-authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                oauthClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(googleTokenDto: GoogleTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleTokenDto\n                                            \n                                                            GoogleTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/social/providers/google-authentication.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauthClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/social/providers/google-authentication.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  OnModuleInit,\n  UnauthorizedException,\n  forwardRef,\n} from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from 'src/auth/config/jwt.config';\nimport { OAuth2Client } from 'google-auth-library';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GoogleTokenDto } from '../dtos/google-token.dto';\nimport { GenerateTokensProvider } from 'src/auth/providers/generate-tokens.provider';\n\n@Injectable()\nexport class GoogleAuthenticationService implements OnModuleInit {\n  private oauthClient: OAuth2Client;\n\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n\n  onModuleInit() {\n    const clientId = this.jwtConfiguration.googleClientId;\n    const clientSecret = this.jwtConfiguration.googleClientSecret;\n    this.oauthClient = new OAuth2Client(clientId, clientSecret);\n  }\n\n  async authenticate(googleTokenDto: GoogleTokenDto) {\n    try {\n      // Verify the Google Token Sent By User\n      const loginTicket = await this.oauthClient.verifyIdToken({\n        idToken: googleTokenDto.token,\n      });\n      // Extract the payload from Google Token\n      const {\n        email,\n        sub: googleId,\n        given_name: firstName,\n        family_name: lastName,\n      } = loginTicket.getPayload();\n      // Find the user in the database using the googleId\n      const user = await this.usersService.findOneByGoogleId(googleId);\n\n      // If user id found generate the tokens\n      if (user) {\n        return await this.generateTokensProvider.generateTokens(user);\n      } else {\n        // If not create a new user and generate the tokens\n        const newUser = await this.usersService.createGoogleUser({\n          email: email,\n          firstName: firstName,\n          lastName: lastName,\n          googleId: googleId,\n        });\n        return await this.generateTokensProvider.generateTokens(newUser);\n      }\n\n      // throw Unauthorised exception if not Authorised\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GoogleTokenDto.html":{"url":"classes/GoogleTokenDto.html","title":"class - GoogleTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GoogleTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/social/dtos/google-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/social/dtos/google-token.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class GoogleTokenDto {\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GoogleUser.html":{"url":"interfaces/GoogleUser.html","title":"interface - GoogleUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GoogleUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/google-user.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            googleId\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        googleId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface GoogleUser {\n  email: string;\n  firstName: string;\n  lastName: string;\n  googleId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparePasswords\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePasswords(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  abstract hashPassword(data: string | Buffer): Promise;\n\n  abstract comparePasswords(\n    data: string | Buffer,\n    encrypted: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { MailService } from './providers/mail.service';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { join } from 'path';\nimport { EjsAdapter } from '@nestjs-modules/mailer/dist/adapters/ejs.adapter';\n\n@Global() // now, this module can be imported to any existing modules, without a need to import it manually\n@Module({\n  imports: [\n    MailerModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (config: ConfigService) => ({\n        transport: {\n          host: config.get('appConfig.mailHost'),\n          secure: false,\n          port: 2525,\n          auth: {\n            user: config.get('appConfig.smtpUsername'),\n            pass: config.get('appConfig.smtpPassword'),\n          },\n        },\n        defaults: {\n          from: `My Blog `,\n        },\n        template: {\n          dir: join(__dirname, 'templates'),\n          adapter: new EjsAdapter({\n            inlineCssEnabled: true,\n          }),\n          options: {\n            strict: false,\n          },\n        },\n      }),\n    }),\n  ],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/providers/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                sendUserWelcome\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/providers/mail.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        sendUserWelcome\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendUserWelcome(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/providers/mail.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { User } from 'src/users/user.entity';\n\n@Injectable()\nexport class MailService {\n  constructor(\n    /**\n     * Inject mailerService\n     */\n    private readonly mailerService: MailerService,\n  ) {}\n\n  public async sendUserWelcome(user: User): Promise {\n    await this.mailerService.sendMail({\n      to: user.email,\n      from: `Onboarding Team `,\n      subject: 'Welcome to NestJS Blog',\n      template: './welcome',\n      context: {\n        name: user.firstName,\n        email: user.email,\n        loginUrl: 'http://localhost:3000',\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity({ name: 'meta_options' })\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(\n    /**\n     * Inject MetaOptionsService\n     */\n    private readonly metaOptionsService: MetaOptionsService,\n  ) {}\n  @Post()\n  public create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    return this.metaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    /**\n     * Inject MetaOption repository\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepository: Repository,\n  ) {}\n  public async create(createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaOptionRepository.create(\n      createPostMetaOptionsDto,\n    );\n    return await this.metaOptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:18\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\n\nimport { PaginationQueryDto } from '../dtos/pagination-query.dto';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n  public async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const results = await repository.find({\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      take: paginationQuery.limit,\n    });\n\n    /**\n     * Create the request URLs\n     */\n    const baseURL =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n    const newUrl = new URL(this.request.url, baseURL);\n\n    /**\n     * Calculating page number\n     */\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n\n    const previousPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalResponse: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalItems,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`,\n      },\n    };\n\n    return finalResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from './create-post.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/postType.enum';\nimport { PostStatus } from './enums/postStatus.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity({ name: 'posts' })\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    nullable: false,\n    default: PostType.POST,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostStatus,\n    nullable: false,\n    default: PostStatus.DRAFT,\n  })\n  status: PostStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp', // 'datetime' in mysql\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (metaOptions) => metaOptions.post, {\n    // cascade: ['insert', 'remove'], // cascade for certain operations\n    cascade: true, // for all actions\n    eager: true, // eagerly load all relations\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response status if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: GetPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'You get a 200 response status if your post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostsDto } from './dtos/get-posts.dto';\nimport { Request } from 'express';\nimport { REQUEST_USER_KEY } from 'src/auth/constants/auth.constants';\nimport { ActiveUser } from 'src/auth/decorators/active-user.decorator';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Injecting PostsService\n   */\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: GetPostsDto,\n  ) {\n    return this.postsService.findAll(postQuery);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'You get a 201 response status if your post is created successfully',\n  })\n  @Post()\n  public createPost(\n    @Body() createPostDto: CreatePostDto,\n    @ActiveUser() user: ActiveUserData,\n  ) {\n    return this.postsService.create(createPostDto, user);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'You get a 200 response status if your post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreatePostProvider\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { MetaOptionsModule } from 'src/meta-options/meta-options.module';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\nimport { CreatePostProvider } from './providers/create-post.provider';\n\n@Module({\n  imports: [\n    UsersModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    MetaOptionsModule,\n    TagsModule,\n    PaginationModule,\n  ],\n  controllers: [PostsController],\n  providers: [PostsService, CreatePostProvider],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionRepository: Repository, tagsService: TagsService, paginationProvider: PaginationProvider, createPostProvider: CreatePostProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createPostProvider\n                                                  \n                                                        \n                                                                        CreatePostProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto, user: ActiveUserData)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Create new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            ActiveUserData\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(postQuery: GetPostsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postQuery\n                                            \n                                                            GetPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { GetPostsDto } from '../dtos/get-posts.dto';\nimport { take } from 'rxjs';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\nimport { CreatePostProvider } from './create-post.provider';\nimport { ActiveUserData } from 'src/auth/interfaces/active-user-data.interface';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    private readonly usersService: UsersService,\n    /**\n     * Inject Posts repository\n     */\n    @InjectRepository(Post)\n    private readonly postsRepository: Repository,\n    /**\n     * Inject MetaOption repository\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepository: Repository,\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n    /**\n     * Inject PaginationProvider\n     */\n    private readonly paginationProvider: PaginationProvider,\n    /**\n     * Inject createPostProvider\n     */\n    private readonly createPostProvider: CreatePostProvider,\n  ) {}\n  /**\n   * Create new post\n   */\n  public async create(createPostDto: CreatePostDto, user: ActiveUserData) {\n    return await this.createPostProvider.create(createPostDto, user);\n  }\n\n  public async findAll(postQuery: GetPostsDto): Promise> {\n    const posts = await this.paginationProvider.paginateQuery(\n      {\n        limit: postQuery.limit,\n        page: postQuery.page,\n      },\n      this.postsRepository,\n    );\n\n    return posts;\n  }\n\n  public async delete(id: number) {\n    await this.postsRepository.delete(id);\n\n    // confirmation\n    return { deleted: true, id };\n  }\n\n  public async update(patchPostDto: PatchPostDto) {\n    // Find the Tags\n    let tags = undefined;\n    let post = undefined;\n\n    try {\n      tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n      );\n    }\n\n    /**\n     * Number of tags need to be equal\n     */\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException(\n        'Please check your tag IDs, and ensure they are correct',\n      );\n    }\n    // Find the Post\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n      );\n    }\n\n    if (!post) {\n      throw new BadRequestException('The post ID does not exist');\n    }\n\n    // Update the properties of the Post\n    post.title = patchPostDto.title ?? post.title; // spread operator isn't working here {...post, ...patchPostDto}\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.status = patchPostDto.status ?? post.status;\n    post.content = patchPostDto.content ?? post.content;\n    post.schema = patchPostDto.schema ?? post.schema;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n    // metaOptions is skipped, not reallly sure why\n    // I added schema to be updated also, not sure it is neeeded\n\n    // Assign the new Tags to the Post\n    post.tags = tags;\n\n    // Save the Post and return it (save is the safest method to save the post, don't mind update- methods)\n    try {\n      await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n      );\n    }\n    return post;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/refresh-token.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/refresh-token.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class RefreshTokenDto {\n  @IsNotEmpty()\n  @IsString()\n  refreshToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RefreshTokensProvider.html":{"url":"injectables/RefreshTokensProvider.html","title":"injectable - RefreshTokensProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RefreshTokensProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/refresh-tokens.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                refreshTokens\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, jwtConfiguration: ConfigType<>, generateTokensProvider: GenerateTokensProvider, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/refresh-tokens.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        refreshTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshTokens(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/refresh-tokens.provider.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshTokenDto\n                                            \n                                                            RefreshTokenDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RefreshTokenDto } from '../dtos/refresh-token.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigType } from '@nestjs/config';\nimport jwtConfig from '../config/jwt.config';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\nimport { ActiveUserData } from '../interfaces/active-user-data.interface';\n\n@Injectable()\nexport class RefreshTokensProvider {\n  constructor(\n    /**\n     * Inject jwtService\n     */\n    private readonly jwtService: JwtService,\n\n    /**\n     * Inject jwtConfiguration\n     */\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n\n    /**\n     * Inject generateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n\n    /**\n     * Inject usersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public async refreshTokens(refreshTokenDto: RefreshTokenDto) {\n    try {\n      // Verify the refresh token vaildity from the request body - jwtService and jwtConfiguration\n      const { sub } = await this.jwtService.verifyAsync\n      >(refreshTokenDto.refreshToken, {\n        secret: this.jwtConfiguration.secret,\n        audience: this.jwtConfiguration.audience,\n        issuer: this.jwtConfiguration.issuer,\n      });\n\n      // Fetch the user from the db - usersService\n      const user = await this.usersService.findOneById(sub);\n\n      // Generate the tokens\n      return await this.generateTokensProvider.generateTokens(user);\n    } catch (error) {\n      throw new UnauthorizedException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/signin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/signin.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SignInDto {\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SignInProvider.html":{"url":"injectables/SignInProvider.html","title":"injectable - SignInProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SignInProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/sign-in.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, hashingProvider: HashingProvider, generateTokensProvider: GenerateTokensProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/sign-in.provider.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        generateTokensProvider\n                                                  \n                                                        \n                                                                        GenerateTokensProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/sign-in.provider.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signInDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { SignInDto } from '../dtos/signin.dto';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { HashingProvider } from './hashing.provider';\nimport { GenerateTokensProvider } from './generate-tokens.provider';\n\n@Injectable()\nexport class SignInProvider {\n  constructor(\n    /**\n     * Inject UsersService\n     */\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n\n    /**\n     * Inject HashingProvider\n     */\n    private readonly hashingProvider: HashingProvider,\n\n    /**\n     * Inject GenerateTokensProvider\n     */\n    private readonly generateTokensProvider: GenerateTokensProvider,\n  ) {}\n  public async signIn(signInDto: SignInDto) {\n    const user = await this.usersService.findOneByEmail(signInDto.email);\n\n    // Compare password sent by a user to the hash from the db\n    let isEqual: boolean = false;\n\n    try {\n      isEqual = await this.hashingProvider.comparePasswords(\n        signInDto.password,\n        user.password,\n      );\n    } catch (error) {\n      throw new RequestTimeoutException(error, {\n        description: 'Could not compare passwords',\n      });\n    }\n\n    if (!isEqual) {\n      throw new UnauthorizedException('Incorrect password');\n    }\n\n    // Generate access and refresh tokens\n    return await this.generateTokensProvider.generateTokens(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity({ name: 'tags' })\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  // this column sets this entire entity for 'soft' deletion\n  @DeleteDateColumn()\n  deletedAt: Date;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  })\n  posts: Post[];\n}\n\n// https://orkhan.gitbook.io/typeorm/docs/decorator-reference\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n  @Post()\n  public create(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  @Delete()\n  public async delete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.delete(id);\n  }\n\n  // /tags/soft-delete\n  @Delete('/soft-delete')\n  public async softDelete(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Tag])],\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject tagsRepository\n     */\n    @InjectRepository(Tag) private readonly tagsRepository: Repository,\n  ) {}\n  public async create(createTagDto: CreateTagDto) {\n    const newTag = this.tagsRepository.create(createTagDto);\n    return await this.tagsRepository.save(newTag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    const results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n\n    return results;\n  }\n\n  public async delete(id: number) {\n    await this.tagsRepository.delete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  public async softDelete(id: number) {\n    await this.tagsRepository.softDelete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Upload.html":{"url":"entities/Upload.html","title":"entity - Upload","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Upload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/upload.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                mime\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                size\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        mime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 128, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: FileTypes, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/uploads/upload.entity.ts:55\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { FileTypes } from './enums/file-types.enum';\n\n@Entity()\nexport class Upload {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  path: string;\n\n  @Column({\n    type: 'enum',\n    enum: FileTypes,\n    default: FileTypes.IMAGE,\n    nullable: false,\n  })\n  type: string;\n\n  @Column({\n    type: 'varchar',\n    length: 128,\n    nullable: false,\n  })\n  mime: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: false,\n  })\n  size: number;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadFile.html":{"url":"interfaces/UploadFile.html","title":"interface - UploadFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/interfaces/upload-file.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         FileTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         FileTypes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FileTypes } from '../enums/file-types.enum';\n\nexport interface UploadFile {\n  name: string;\n  path: string;\n  type: FileTypes;\n  mime: string;\n  size: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadToAwsProvider.html":{"url":"injectables/UploadToAwsProvider.html","title":"injectable - UploadToAwsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadToAwsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/upload-to-aws.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                fileUpload\n                            \n                            \n                                    Private\n                                generateFileName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/upload-to-aws.provider.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        fileUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    fileUpload(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateFileName(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/upload-to-aws.provider.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, RequestTimeoutException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { S3 } from 'aws-sdk';\nimport * as path from 'path';\nimport { v4 as uuid4 } from 'uuid';\n\n@Injectable()\nexport class UploadToAwsProvider {\n  constructor(\n    /**\n     * Inject configService\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async fileUpload(file: Express.Multer.File) {\n    const s3 = new S3();\n\n    try {\n      const uploadResult = await s3\n        .upload({\n          Bucket: this.configService.get('appConfig.awsBucketName'),\n          Body: file.buffer,\n          Key: this.generateFileName(file),\n          ContentType: file.mimetype,\n        })\n        .promise();\n\n      return uploadResult.Key;\n    } catch (error) {\n      throw new RequestTimeoutException(error);\n    }\n  }\n\n  private generateFileName(file: Express.Multer.File) {\n    // Extract filename\n    const name = file.originalname.split('.')[0];\n\n    // Remove whitespaces from the filename\n    name.replace(/\\s/g, '').trim();\n\n    // Extract the extension from the file\n    const extension = path.extname(file.originalname);\n\n    // Generate timestamp and concatenate to the filename\n    const timestamp = new Date().getTime().toString().trim();\n\n    // Return file uuid concatenated with filename\n    return `${name}-${timestamp}-${uuid4()}${extension}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UploadsController.html":{"url":"controllers/UploadsController.html","title":"controller - UploadsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UploadsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/uploads.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                uploads\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@ApiHeaders(['undefined', 'undefined'])@ApiOperation({summary: 'Upload a new image to the server'})@Post('file')\n                \n            \n\n                    \n                        \n                            Defined in src/uploads/uploads.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiHeaders, ApiOperation } from '@nestjs/swagger';\nimport { Express } from 'express';\nimport { UploadsService } from './providers/uploads.service';\n\n@Controller('uploads')\nexport class UploadsController {\n  constructor(\n    /**\n     * Inject uploadsService\n     */\n    private readonly uploadsService: UploadsService,\n  ) {}\n\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiHeaders([\n    { name: 'Content-Type', description: 'multipart/form-data' },\n    { name: 'Authorization', description: 'Bearer Token' },\n  ])\n  @ApiOperation({\n    summary: 'Upload a new image to the server',\n  })\n  @Post('file')\n  public uploadFile(@UploadedFile() file: Express.Multer.File) {\n    return this.uploadsService.uploadFile(file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UploadsModule.html":{"url":"modules/UploadsModule.html","title":"module - UploadsModule","body":"\n                   \n\n\n\n\n    Modules\n    UploadsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\n\n\nUploadsModule\n\nUploadsModule\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/uploads/uploads.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UploadToAwsProvider\n                        \n                        \n                            UploadsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UploadsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UploadsController } from './uploads.controller';\nimport { UploadsService } from './providers/uploads.service';\nimport { UploadToAwsProvider } from './providers/upload-to-aws.provider';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Upload } from './upload.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Upload])],\n  controllers: [UploadsController],\n  providers: [UploadsService, UploadToAwsProvider],\n})\nexport class UploadsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UploadsService.html":{"url":"injectables/UploadsService.html","title":"injectable - UploadsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UploadsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/uploads/providers/uploads.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadsRepository: Repository, uploadToAwsProvider: UploadToAwsProvider, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/uploads/providers/uploads.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        uploadsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uploadToAwsProvider\n                                                  \n                                                        \n                                                                        UploadToAwsProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/uploads/providers/uploads.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Upload } from '../upload.entity';\nimport { Repository } from 'typeorm';\nimport { UploadToAwsProvider } from './upload-to-aws.provider';\nimport { ConfigService } from '@nestjs/config';\nimport { UploadFile } from '../interfaces/upload-file.interface';\nimport { FileTypes } from '../enums/file-types.enum';\n\n@Injectable()\nexport class UploadsService {\n  constructor(\n    /**\n     * Inject uploadsRepository\n     */\n    @InjectRepository(Upload)\n    private readonly uploadsRepository: Repository,\n\n    /**\n     * Inject uploadToAwsProvider\n     */\n    private readonly uploadToAwsProvider: UploadToAwsProvider,\n\n    /**\n     * Inject configService\n     */\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async uploadFile(file: Express.Multer.File) {\n    // Throw error for any unsupported MIME types (support only image types)\n    if (\n      !['image/gif', 'image/jpeg', 'image/jpg', 'image/png'].includes(\n        file.mimetype,\n      )\n    ) {\n      throw new BadRequestException('MIME type not supported');\n    }\n\n    try {\n      // Upload the file to AWS S3\n      const name = await this.uploadToAwsProvider.fileUpload(file);\n\n      // Generate a new entry in the db\n      const uploadFile: UploadFile = {\n        name: name,\n        path: `https://${this.configService.get('appConfig.awsCloudfrontUrl')}/${name}`,\n        type: FileTypes.IMAGE,\n        mime: file.mimetype,\n        size: file.size,\n      };\n\n      const upload = this.uploadsRepository.create(uploadFile);\n      return await this.uploadsRepository.save(upload);\n    } catch (error) {\n      throw new ConflictException(error);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                googleId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Optional\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        googleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Post } from 'src/posts/post.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  @Exclude()\n  password?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n  })\n  @Exclude()\n  googleId?: string;\n\n  @OneToMany(() => Post, (post) => post.author)\n  posts?: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsers: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsers\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Auth(AuthType.None)@UseInterceptors(ClassSerializerInterceptor)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched succesfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n  UseInterceptors,\n  ClassSerializerInterceptor,\n  // SetMetadata,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\nimport { Auth } from 'src/auth/decorators/auth.decorator';\nimport { AuthType } from 'src/auth/enums/auth-type.enum';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Injecting UsersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched succesfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'The position of the page that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  @Auth(AuthType.None)\n  @UseInterceptors(ClassSerializerInterceptor)\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Post('create-many')\n  public createManyUsers(@Body() createManyUsers: CreateManyUsersDto) {\n    return this.usersService.createMany(createManyUsers);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { User } from '../user.entity';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(\n    /**\n     * Inject Datasource\n     */\n    private readonly dataSource: DataSource,\n  ) {}\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n\n    // Create Query Runner Instance\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // Connect Query Runner to datasource\n      await queryRunner.connect();\n\n      // Start Transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Could not connect to the database');\n    }\n\n    try {\n      for (const user of createManyUsersDto.users) {\n        const newUser = queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      // If successful, commit\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // If unsuccessful rollback\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // Release connection\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release the connection', {\n          description: String(error),\n        });\n      }\n    }\n\n    return newUsers;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CreateGoogleUserProvider\n                        \n                        \n                            CreateUserProvider\n                        \n                        \n                            FindOneByGoogleIdProvider\n                        \n                        \n                            FindOneUserByEmailProvider\n                        \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport { UsersService } from './providers/users.service';\nimport { CreateUserProvider } from './providers/create-user.provider';\nimport { FindOneUserByEmailProvider } from './providers/find-one-user-by-email.provider';\nimport { UsersController } from './users.controller';\nimport { User } from './user.entity';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { FindOneByGoogleIdProvider } from './providers/find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './providers/create-google-user.provider';\n\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    UsersCreateManyProvider,\n    CreateUserProvider,\n    FindOneUserByEmailProvider,\n    FindOneByGoogleIdProvider,\n    CreateGoogleUserProvider,\n  ],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createGoogleUser\n                            \n                            \n                                    Public\n                                    Async\n                                createMany\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                findOneByGoogleId\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, usersCreateManyProvider: UsersCreateManyProvider, createUserProvider: CreateUserProvider, findOneUserByEmail: FindOneUserByEmailProvider, findOneByGoogleIdProvider: FindOneByGoogleIdProvider, createGoogleUserProvider: CreateGoogleUserProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createUserProvider\n                                                  \n                                                        \n                                                                        CreateUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneUserByEmail\n                                                  \n                                                        \n                                                                        FindOneUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findOneByGoogleIdProvider\n                                                  \n                                                        \n                                                                        FindOneByGoogleIdProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        createGoogleUserProvider\n                                                  \n                                                        \n                                                                        CreateGoogleUserProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createGoogleUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createGoogleUser(googleUser: GoogleUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleUser\n                                            \n                                                            GoogleUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMany(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:68\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneByGoogleId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByGoogleId(googleId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                googleId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { Repository } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { CreateUserProvider } from './create-user.provider';\nimport { FindOneUserByEmailProvider } from './find-one-user-by-email.provider';\nimport { FindOneByGoogleIdProvider } from './find-one-by-google-id.provider';\nimport { CreateGoogleUserProvider } from './create-google-user.provider';\nimport { GoogleUser } from '../interfaces/google-user.interface';\n\n/**\n * Class to connect to Users table and perform business operations\n * @class\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    /**\n     * Inject User repository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Inject UsersCreateManyProvider\n     */\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n\n    /**\n     * Inject CreateUserProvider\n     */\n    private readonly createUserProvider: CreateUserProvider,\n\n    /**\n     * Inject findOneUserByEmail provider\n     */\n    private readonly findOneUserByEmail: FindOneUserByEmailProvider,\n\n    /**\n     * Inject findOneByGoogleId provider\n     */\n    private readonly findOneByGoogleIdProvider: FindOneByGoogleIdProvider,\n\n    /**\n     * Inject createGoogleUserProvider\n     */\n    private readonly createGoogleUserProvider: CreateGoogleUserProvider,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDto) {\n    return this.createUserProvider.createUser(createUserDto);\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The API endpoint does not exist',\n        fileName: 'users.service.ts', // be careful with this exposing\n        lineNumber: 100,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      // this info is not being sent to the user, it serves for logging\n      {\n        cause: new Error(),\n        description: 'Occurred because the API endpont was permanently moved',\n      },\n    );\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment, please try later',\n        { description: 'Error connecting to the database' },\n      );\n    }\n\n    /**\n     * Handle the user does not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user id does not exist');\n    }\n    return user;\n  }\n\n  public async createMany(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createMany(createManyUsersDto);\n  }\n\n  public async findOneByEmail(email: string) {\n    return await this.findOneUserByEmail.findOneByEmail(email);\n  }\n\n  public async findOneByGoogleId(googleId: string) {\n    return await this.findOneByGoogleIdProvider.findOneByGoogleId(googleId);\n  }\n\n  public async createGoogleUser(googleUser: GoogleUser) {\n    return await this.createGoogleUserProvider.createGoogleUser(googleUser);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.create.ts\n            \n            function\n            appCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            AUTH_TYPE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants/auth.constants.ts\n            \n            variable\n            REQUEST_USER_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/active-user.decorator.ts\n            \n            variable\n            ActiveUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/auth.decorator.ts\n            \n            variable\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dtos/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/access-token/access-token.guard.ts\n            \n            guard\n            AccessTokenGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/authentication/authentication.guard.ts\n            \n            guard\n            AuthenticationGuard\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/interfaces/active-user-data.interface.ts\n            \n            interface\n            ActiveUserData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/generate-tokens.provider.ts\n            \n            injectable\n            GenerateTokensProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/refresh-tokens.provider.ts\n            \n            injectable\n            RefreshTokensProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/sign-in.provider.ts\n            \n            injectable\n            SignInProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/social/dtos/google-token.dto.ts\n            \n            class\n            GoogleTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/google-authentication.controller.ts\n            \n            controller\n            GoogleAuthenticationController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/social/providers/google-authentication.service.ts\n            \n            injectable\n            GoogleAuthenticationService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/interceptors/data-response/data-response.interceptor.ts\n            \n            injectable\n            DataResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/mail/providers/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-posts.dto.ts\n            \n            class\n            GetPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/providers/create-post.provider.ts\n            \n            injectable\n            CreatePostProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/interfaces/upload-file.interface.ts\n            \n            interface\n            UploadFile\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/uploads/providers/upload-to-aws.provider.ts\n            \n            injectable\n            UploadToAwsProvider\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/uploads/providers/uploads.service.ts\n            \n            injectable\n            UploadsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/uploads/upload.entity.ts\n            \n            entity\n            Upload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/uploads/uploads.controller.ts\n            \n            controller\n            UploadsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interfaces/google-user.interface.ts\n            \n            interface\n            GoogleUser\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/providers/create-google-user.provider.ts\n            \n            injectable\n            CreateGoogleUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/create-user.provider.ts\n            \n            injectable\n            CreateUserProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-by-google-id.provider.ts\n            \n            injectable\n            FindOneByGoogleIdProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/find-one-user-by-email.provider.ts\n            \n            injectable\n            FindOneUserByEmailProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                33 %\n                (3/9)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                test/helpers/bootstrap-nest-application.helper.ts\n            \n            function\n            bootstrapNestApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/helpers/drop-database.helper.ts\n            \n            function\n            dropDatabase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            completeUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            missingEmail\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            missingFirstName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/users/users.post.e2e-spec.sample-data.ts\n            \n            variable\n            missingPassword\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs-modules/mailer : ^2.0.2\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/multer : ^1.4.11\n        \n            aws-sdk : ^2.1668.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            ejs : ^3.1.10\n        \n            google-auth-library : ^9.13.0\n        \n            joi : ^17.13.3\n        \n            nodemailer : ^6.9.14\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n        \n            uuid : ^10.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthType   (src/.../auth-type.enum.ts)\n                        \n                        \n                            FileTypes   (src/.../file-types.enum.ts)\n                        \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/auth-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthType\n                    \n                \n                        \n                            \n                                 Bearer\n                            \n                        \n                        \n                            \n                                 None\n                            \n                        \n            \n        \n\n    src/uploads/enums/file-types.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FileTypes\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appCreate   (src/.../app.create.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            bootstrapNestApplication   (test/.../bootstrap-nest-application.helper.ts)\n                        \n                        \n                            dropDatabase   (test/.../drop-database.helper.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.create.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appCreate\n                        \n                    \n                \n            \n            \n                \nappCreate(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    test/helpers/bootstrap-nest-application.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrapNestApplication\n                        \n                    \n                \n            \n            \n                \nbootstrapNestApplication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    test/helpers/drop-database.helper.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dropDatabase\n                        \n                    \n                \n            \n            \n                \ndropDatabase(config: ConfigService)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UploadsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UploadsModule\n\n\n\ncluster_UploadsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUploadsModule\n\nUploadsModule\n\nAppModule -->\n\nUploadsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGenerateTokensProvider\n\nGenerateTokensProvider\n\nAuthModule -->\n\nGenerateTokensProvider->AuthModule\n\n\n\n\n\nGoogleAuthenticationService\n\nGoogleAuthenticationService\n\nAuthModule -->\n\nGoogleAuthenticationService->AuthModule\n\n\n\n\n\nRefreshTokensProvider\n\nRefreshTokensProvider\n\nAuthModule -->\n\nRefreshTokensProvider->AuthModule\n\n\n\n\n\nSignInProvider\n\nSignInProvider\n\nAuthModule -->\n\nSignInProvider->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nCreatePostProvider\n\nCreatePostProvider\n\nPostsModule -->\n\nCreatePostProvider->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUploadToAwsProvider\n\nUploadToAwsProvider\n\nUploadsModule -->\n\nUploadToAwsProvider->UploadsModule\n\n\n\n\n\nUploadsService\n\nUploadsService\n\nUploadsModule -->\n\nUploadsService->UploadsModule\n\n\n\n\n\nCreateGoogleUserProvider\n\nCreateGoogleUserProvider\n\nUsersModule -->\n\nCreateGoogleUserProvider->UsersModule\n\n\n\n\n\nCreateUserProvider\n\nCreateUserProvider\n\nUsersModule -->\n\nCreateUserProvider->UsersModule\n\n\n\n\n\nFindOneByGoogleIdProvider\n\nFindOneByGoogleIdProvider\n\nUsersModule -->\n\nFindOneByGoogleIdProvider->UsersModule\n\n\n\n\n\nFindOneUserByEmailProvider\n\nFindOneUserByEmailProvider\n\nUsersModule -->\n\nFindOneUserByEmailProvider->UsersModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActiveUser   (src/.../active-user.decorator.ts)\n                        \n                        \n                            Auth   (src/.../auth.decorator.ts)\n                        \n                        \n                            AUTH_TYPE_KEY   (src/.../auth.constants.ts)\n                        \n                        \n                            completeUser   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                        \n                            missingEmail   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            missingFirstName   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            missingPassword   (test/.../users.post.e2e-spec.sample-data.ts)\n                        \n                        \n                            REQUEST_USER_KEY   (src/.../auth.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/active-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (field: keyof ActiveUserData | undefined, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user: ActiveUserData = request[REQUEST_USER_KEY];\n\n    return field ? user?.[field] : user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Auth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...authTypes: AuthType[]) =>\n  SetMetadata(AUTH_TYPE_KEY, authTypes)\n                    \n                \n\n\n        \n    \n\n    src/auth/constants/auth.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_TYPE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authType'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REQUEST_USER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user'\n                    \n                \n\n\n        \n    \n\n    test/users/users.post.e2e-spec.sample-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        completeUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n  password: 'password123!',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        missingEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  password: 'password123!',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        missingFirstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n  password: 'password123!',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        missingPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  firstName: faker.person.firstName(),\n  lastName: faker.person.lastName(),\n  email: faker.internet.email(),\n}\n                    \n                \n\n\n        \n    \n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
